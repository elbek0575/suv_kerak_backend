# bots/suv_kerak_bot.py
import os
import asyncio
from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode, ContentType
from aiogram.client.default import DefaultBotProperties
from aiogram.client.session.aiohttp import AiohttpSession
from aiogram.filters import CommandStart
from aiogram.types import Update, Message, ContentType
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiogram.exceptions import TelegramBadRequest
from aiohttp import web
from asgiref.sync import async_to_sync
from dotenv import load_dotenv
from django.db import connection
from django.utils import timezone
import json, re, time, requests
from django.views.decorators.csrf import csrf_exempt
from django.conf import settings
from django.http import JsonResponse, HttpRequest, HttpResponseNotAllowed
from datetime import datetime
import secrets, string
from django.contrib.auth.hashers import make_password, check_password
import logging


# üîê –¢–∞—à“õ–∏ —û–∑–≥–∞—Ä—É–≤—á–∏–ª–∞—Ä–Ω–∏ —é–∫–ª–∞–π–º–∏–∑
load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_PATH = "/aiogram-bot-webhook/"
WEBHOOK_HOST = os.getenv("WEBHOOK_HOST")  # https://xxxx.ngrok-free.app
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"

# ‚úÖ Bot –≤–∞ Dispatcher
bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()

logger = logging.getLogger(__name__)

# üìç –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è–≥–∞ –∂–∞–≤–æ–± –±–µ—Ä–∏—à (v3)
@dp.message(F.content_type == ContentType.LOCATION)  # yoki: @dp.message(lambda m: m.location is not None)
async def handle_location(message: Message):
    lat = message.location.latitude
    lng = message.location.longitude
    text = f"üìç –ú–∏–∂–æ–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–ª–∞—Ä–∏:\n<code>{lat}</code>, <code>{lng}</code>"

    # 1-—É—Ä–∏–Ω–∏—à: reply
    try:
        await message.reply(text)
    except TelegramBadRequest as e:
        # "message to be replied not found" –≤–∞ —à—É–Ω–≥–∞ —û—Ö—à–∞—à —Ö–∞—Ç–æ–ª–∞—Ä–¥–∞ fallback
        logging.exception("sendMessage failed, reply javob bukdi.")
        await message.answer(text)
    except Exception:
        # “≥–∞—Ä “õ–∞–Ω–¥–∞–π –∫—É—Ç–∏–ª–º–∞–≥–∞–Ω —Ö–∞—Ç–æ–¥–∞ “≥–∞–º fallback
        logging.exception("sendMessage failed? replysiz javob buldi.")
        await message.answer(text)
        
# üîß AIOHTTP —Å–µ—Ä–≤–µ—Ä
async def on_startup(app):
    await bot.set_webhook(WEBHOOK_URL, drop_pending_updates=True)

async def on_shutdown(app):
    await bot.delete_webhook()

@dp.message(F.text == "/start")
async def cmd_start(msg: Message):
    await msg.answer("–ê—Å—Å–∞–ª–æ–º—É –∞–ª–∞–π–∫—É–º! SUV KERAK –±–æ—Ç–∏ —Ç–∞–π—ë—Ä.")



async def _process_update(body_text: str) -> None:
    update = Update.model_validate_json(body_text)
    session = AiohttpSession()  # –∞—Ä–≥—É–º–µ–Ω—Ç—Å–∏–∑
    # ‚¨áÔ∏è –ë—É –µ—Ä–¥–∞ parse_mode –±–µ—Ä–∏–ª–∞–¥–∏ ‚Äî –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–¥–∞ –≠–ú–ê–°
    bot_defaults = DefaultBotProperties(parse_mode=ParseMode.HTML)
    async with Bot(token=BOT_TOKEN, session=session, default=bot_defaults) as bot:
        await dp.feed_update(bot, update)


@csrf_exempt
def aiogram_webhook_view(request):
    if request.method != "POST":
        return HttpResponseNotAllowed(["POST"])

    try:
        body = (request.body or b"").decode("utf-8", errors="ignore")
        if not body.strip():
            logger.warning("Empty Telegram webhook body")
            return JsonResponse({"ok": True})

        # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —É—á—É–Ω “õ–∏—Å“õ–∞—Ä—Ç–∏—Ä–∏–± –ª–æ–≥–ª–∞–π–º–∏–∑ (–∏—Ö—Ç–∏—ë—Ä–∏–π)
        logger.info("Webhook body (trimmed): %s", body[:2048])

        # async “õ–∏—Å–º–Ω–∏ sync‚Äô–¥–∞–Ω —á–∞“õ–∏—Ä–∏—à
        async_to_sync(_process_update)(body)

        # Telegram‚Äô–≥–∞ “≥–∞—Ä –¥–æ–∏–º 200
        return JsonResponse({"ok": True})
    except Exception:
        logger.exception("‚ùå webhook top-level exception")
        return JsonResponse({"ok": True})



#–ê—É–¥–∏—Ç –Ω–∞–∑–æ—Ä–∞—Ç —É—á—É–Ω “õ–∞–π–¥ –ª–æ–≥–∏
def audit_log(action: str,
              request,
              *,
              actor_id: int | None = None,
              status: int | None = None,
              object_type: str | None = None,
              object_id: int | None = None,
              meta: dict | None = None):
    try:
        ip = request.META.get("HTTP_X_FORWARDED_FOR", "").split(",")[0].strip() or request.META.get("REMOTE_ADDR")
        ua = request.META.get("HTTP_USER_AGENT")
        path = request.path
        method = request.method
        print(f"action {action}")
        with connection.cursor() as cur:
            cur.execute(
                """
                INSERT INTO public.audit_log
                    (ts, actor_id, action, path, method, status, ip, user_agent, object_type, object_id, meta)
                VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s::jsonb)
                """,
                [timezone.now(), actor_id, action, path, method, status, ip, ua, object_type, object_id,
                 json.dumps(meta or {})]
            )
    except Exception:
        # –ª–æ–≥ —ë–∑–∏—à–¥–∞–Ω —Ö–∞—Ç–æ–ª–∏–∫ —Å–µ—Ä–≤–∏—Å–Ω–∏ —Ç—û—Ö—Ç–∞—Ç–º–∞—Å–∏–Ω
        pass


# helpers (–Å—Ä–¥–∞–º—á–∏ —Ñ—É–Ω–∫—Ü–∏—è–ª–∞—Ä)
LANG_MAP = {
    "uz": "uz",          # —û–∑–±–µ–∫ (–∫–∏—Ä–∏–ª–ª)
    "ru": "ru",
    "en": "en",
    "uz_lat": "uz_lat",  # —û–∑–±–µ–∫ (–ª–æ—Ç–∏–Ω)    
}

def already_registered_text(lang: str, chat_id: int, phone: str | None = None) -> str:
    phone_line = f"üìû <code>{phone}</code>\n" if phone else ""
    texts = {
        "uz": (
            "–°–∏–∑ –∞–≤–≤–∞–ª —Ä—û–π—Ö–∞—Ç–¥–∞–Ω —û—Ç–≥–∞–Ω—Å–∏–∑ ‚úÖ\n"
            f"ID: <code>{chat_id}</code>\n"
            f"{phone_line}"
            "–ü–∞—Ä–æ–ª–Ω–∏ —É–Ω—É—Ç–≥–∞–Ω –±—û–ª—Å–∞–Ω–≥–∏–∑, –∏–ª–æ–≤–∞–≥–∞ –∫–∏—Ä–∏–± "
            "‚Äú–•–∞–≤—Ñ—Å–∏–∑–ª–∏–∫ ‚Üí –ü–∞—Ä–æ–ª–Ω–∏ —û–∑–≥–∞—Ä—Ç–∏—Ä–∏—à‚Äù –±—û–ª–∏–º–∏ –æ—Ä“õ–∞–ª–∏ —è–Ω–≥–∏–ª–∞–Ω–≥."
        ),
        "ru": (
            "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã ‚úÖ\n"
            f"ID: <code>{chat_id}</code>\n"
            f"{phone_line}"
            "–ï—Å–ª–∏ –≤—ã –∑–∞–±—ã–ª–∏ –ø–∞—Ä–æ–ª—å, –æ—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ —Å–º–µ–Ω–∏—Ç–µ –µ–≥–æ –≤ —Ä–∞–∑–¥–µ–ª–µ "
            "¬´–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å ‚Üí –°–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å¬ª."
        ),
        "en": (
            "You are already registered ‚úÖ\n"
            f"ID: <code>{chat_id}</code>\n"
            f"{phone_line}"
            "If you forgot your password, open the app and change it under "
            "‚ÄúSecurity ‚Üí Change password‚Äù."
        ),
        "uz_lat": (
            "Siz avval ro'yxatdan o'tgansiz ‚úÖ\n"
            f"ID: <code>{chat_id}</code>\n"
            f"{phone_line}"
            "Parolni unutgan bo'lsangiz, ilovaga kirib "
            "‚ÄúXavfsizlik ‚Üí Parolni o‚Äòzgartirish‚Äù bo‚Äòlimi orqali yangilang."
        ),
    }
    return texts.get(lang, texts["uz"])


def parse_lang_and_promkod(parts: list[str]) -> tuple[list[str], str | None, str | None]:
    """Oxiridagi til kodini ajratib oladi; undan oldingi element promkod bo'lishi mumkin."""
    lang = None
    prom = None
    if parts and parts[-1].lower() in LANG_MAP:
        lang = LANG_MAP[parts[-1].lower()]
        parts = parts[:-1]
    if len(parts) >= 5 and parts[4]:
        prom = parts[4]
    return parts, lang, prom

def unknown_command_text(lang: str) -> str:
    texts = {
        "uz": (            
            "–ë—É –±–æ—Ç ‚ÄúSUV KERAK‚Äù –∏–ª–æ–≤–∞—Å–∏–¥–∞ —Ä—û–π—Ö–∞—Ç–¥–∞–Ω —û—Ç–∏—à –∞–º–∞–ª–ª–∞—Ä–∏–Ω–∏ –±–∞–∂–∞—Ä–∞–¥–∏. "
            "–ê–≥–∞—Ä —Å–∏–∑ —Å—É–≤ —Ç–∞—Ä“õ–∞—Ç–∏—à —Ñ–∞–æ–ª–∏—è—Ç–∏ –±–∏–ª–∞–Ω —à—É“ì—É–ª–ª–∞–Ω—Å–∞–Ω–≥–∏–∑, Google Play —ë–∫–∏ App Store'–¥–∞–Ω "
            "—Ç–µ–≥–∏—à–ª–∏ –∏–ª–æ–≤–∞–ª–∞—Ä–Ω–∏ —é–∫–ª–∞–± –æ–ª–∏–Ω–≥ –≤–∞ –±–æ—Ç–¥–∞–Ω —Ñ–æ–π–¥–∞–ª–∞–Ω–∏–Ω–≥.\n\n"
            "–ò–ª–æ–≤–∞ 3 —Ç—É—Ä–¥–∞–≥–∏ —Ñ–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏–ª–∞—Ä —É—á—É–Ω:\n"
            "‚Ä¢ <b>BOSS</b> ‚Äî –±–∏–∑–Ω–µ—Å —ç–≥–∞—Å–∏ –∏–ª–æ–≤–∞—Å–∏\n"
            "‚Ä¢ <b>MENEDJER</b> ‚Äî –∏—à –±–æ—à“õ–∞—Ä—É–≤—á–∏ –∏–ª–æ–≤–∞—Å–∏\n"
            "‚Ä¢ <b>COURIER</b> ‚Äî —Å—É–≤ —Ç–∞—Ä“õ–∞—Ç—É–≤—á–∏ –∫—É—Ä—å–µ—Ä –∏–ª–æ–≤–∞—Å–∏\n\n"
            "–¢–µ–≥–∏—à–ª–∏ –∏–ª–æ–≤–∞–Ω–∏ —é–∫–ª–∞–± –æ–ª–∏–Ω–≥ –≤–∞ —Ä—û–π—Ö–∞—Ç–¥–∞–Ω —û—Ç–∏–Ω–≥.\n"
            "–°–∞–≤–æ–ª–ª–∞—Ä–∏–Ω–≥–∏–∑ –±—û–ª—Å–∞, /savol –∫–æ–º–∞–Ω–¥–∞—Å–∏–¥–∞–Ω –∫–µ–π–∏–Ω —Å–∞–≤–æ–ª–∏–Ω–≥–∏–∑–Ω–∏ –≤–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∏–Ω–≥–∏–∑–Ω–∏ “õ–æ–ª–¥–∏—Ä–∏–Ω–≥ ‚Äî "
            "—Ö–æ–¥–∏–º–ª–∞—Ä–∏–º–∏–∑ –∞–ª–æ“õ–∞–≥–∞ —á–∏“õ–∏—à–∞–¥–∏ –≤–∞ –∏–º–∫–æ–Ω “õ–∞–¥–∞—Ä –∂–∞–≤–æ–± –±–µ—Ä–∏—à–∞–¥–∏.\n\n"
            "–ë–∞—Ç–∞—Ñ—Å–∏–ª: <a href=\"https://hisob.uz\">hisob.uz</a>\n\n"
            "–¢–∏–∂–æ—Ä–∞—Ç —Å–∏–∑–¥–∞–Ω, “≥–∏—Å–æ–±–∏ –±–∏–∑–¥–∞–Ω.\n"
            "–¢–∞–∫–æ–º–∏–ª–ª–∞—à—Ç–∏—Ä–∏—à–¥–∞ –¥–∞–≤–æ–º —ç—Ç–∞–º–∏–∑.\n\n__________________________________________\n\n\n"
                    
            "Bu bot ‚ÄúSUV KERAK‚Äù ilovasida ro‚Äòyxatdan o‚Äòtish amallarini bajaradi. "
            "Agar siz suv tarqatish faoliyati bilan shug‚Äòullansangiz, Google Play yoki App Store‚Äôdan "
            "tegishli ilovalarni yuklab oling va botdan foydalaning.\n\n"
            "Ilova 3 turdagi foydalanuvchilar uchun:\n"
            "‚Ä¢ <b>BOSS</b> ‚Äî biznes egasi ilovasi\n"
            "‚Ä¢ <b>MENEDJER</b> ‚Äî ish boshqaruvchi ilovasi\n"
            "‚Ä¢ <b>COURIER</b> ‚Äî suv tarqatuvchi kuryer ilovasi\n\n"
            "Tegishli ilovani yuklab oling va ro‚Äòyxatdan o‚Äòting.\n"
            "Savollaringiz bo‚Äòlsa, /savol komandasi dan keyin savolingizni va kontaktingizni qoldiring ‚Äî "
            "xodimlarimiz alo“õ–∞ qiladi va imkon qadar javob beradi.\n\n"
            "Batafsil: <a href=\"https://hisob.uz\">hisob.uz</a>\n\n"
            "Tijorat sizdan, hisobi bizdan.\n"            
            "Takomillashtirishda davom etamiz.\n\n____________________________________________________\n\n\n"
                
            "–≠—Ç–æ—Ç –±–æ—Ç –≤—ã–ø–æ–ª–Ω—è–µ—Ç —à–∞–≥–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ ¬´SUV KERAK¬ª. "
            "–ï—Å–ª–∏ –≤—ã –∑–∞–Ω–∏–º–∞–µ—Ç–µ—Å—å –¥–æ—Å—Ç–∞–≤–∫–æ–π –≤–æ–¥—ã, —Å–∫–∞—á–∞–π—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ Google Play –∏–ª–∏ App Store "
            "–∏ –ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –±–æ—Ç–æ–º.\n\n"
            "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è 3 —Ç–∏–ø–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"
            "‚Ä¢ <b>BOSS</b> ‚Äî –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –±–∏–∑–Ω–µ—Å–∞\n"
            "‚Ä¢ <b>MENEDJER</b> ‚Äî –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É–ø—Ä–∞–≤–ª—è—é—â–µ–≥–æ (–º–µ–Ω–µ–¥–∂–µ—Ä–∞)\n"
            "‚Ä¢ <b>COURIER</b> ‚Äî –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∫—É—Ä—å–µ—Ä–∞ –ø–æ –¥–æ—Å—Ç–∞–≤–∫–µ –≤–æ–¥—ã\n\n"
            "–°–∫–∞—á–∞–π—Ç–µ –Ω—É–∂–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.\n"
            "–ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /savol, –∑–∞—Ç–µ–º –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –∏ –∫–æ–Ω—Ç–∞–∫—Ç ‚Äî "
            "–Ω–∞—à–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ —Å–≤—è–∂—É—Ç—Å—è —Å –≤–∞–º–∏ –∏ –æ—Ç–≤–µ—Ç—è—Ç.\n\n"
            "–ü–æ–¥—Ä–æ–±–Ω–µ–µ: <a href=\"https://hisob.uz\">hisob.uz</a>\n\n"
            "–ë–∏–∑–Ω–µ—Å ‚Äî —Å –≤–∞—Å, —É—á—ë—Ç ‚Äî —Å –Ω–∞—Å.\n"
            "–ú—ã –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —É–ª—É—á—à–∞—Ç—å —Å–µ—Ä–≤–∏—Å.\n\n____________________________________________________\n\n\n"
                
            "This bot handles registration steps for the ‚ÄúSUV KERAK‚Äù app. "
            "If you work in water delivery, download the relevant apps from Google Play or the App Store "
            "and use the bot.\n\n"
            "The app supports 3 user types:\n"
            "‚Ä¢ <b>BOSS</b> ‚Äî business owner app\n"
            "‚Ä¢ <b>MENEDJER</b> ‚Äî manager app\n"
            "‚Ä¢ <b>COURIER</b> ‚Äî courier app for water delivery\n\n"
            "Download the appropriate app and register.\n"
            "If you have questions, use /savol and then send your question and contact details ‚Äî "
            "our team will reach out and reply.\n\n"
            "More details: <a href=\"https://hisob.uz\">hisob.uz</a>\n\n"
            "Business is yours, accounting is ours.\n"
            "We keep improving.\n\n____________________________________________________\n\n\n"
        ),
    }
    return texts.get(lang, texts["uz"])

# –í–µ–±—Ö—É–∫ —Å—É—Ä–æ–≤–∏–≥–∞ –∂–∞–≤–æ–± –±–µ—Ä—É–≤—á–∏ —Ñ—É–Ω–∫—Ü–∏—è
@csrf_exempt
def telegram_webhook(request):
    """
    Telegram webhook view for the ‚ÄúSUV KERAK‚Äù bot.

    “ö–∏—Å“õ–∞—á–∞
    -------
    Telegram‚Äôdan –∫–µ–ª–≥–∞–Ω update‚Äô–ª–∞—Ä–Ω–∏ (POST /webhook/) “õ–∞–±—É–ª “õ–∏–ª–∞–¥–∏, chat_id –≤–∞ –º–∞—Ç–Ω–Ω–∏ –∞–∂—Ä–∞—Ç–∞–¥–∏,
    —Ñ–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏–Ω–∏–Ω–≥ —Ç–∏–ª–∏–Ω–∏ accounts_business.lang –¥–∞–Ω –æ–ª–∞–¥–∏ –≤–∞ –±—É–π—Ä—É“õ“õ–∞ “õ–∞—Ä–∞–± –∂–∞–≤–æ–± —é–±–æ—Ä–∞–¥–∏.

    “ö—û–ª–ª–∞–±-“õ—É–≤–≤–∞—Ç–ª–∞–Ω–∞–¥–∏–≥–∞–Ω –±—É–π—Ä—É“õ–ª–∞—Ä
    --------------------------------
    ‚Ä¢ /start
        –§–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏–≥–∞ —É–º—É–º–∏–π –º–∞—ä–ª—É–º–æ—Ç/–π—û—Ä–∏“õ–Ω–æ–º–∞ —Ö–∞–±–∞—Ä–∏–Ω–∏ —é–±–æ—Ä–∞–¥–∏ (unknown_command_text(lang)).
        (–≠—Å–ª–∞—Ç–º–∞: –ª–æ–≥–∏–∫–∞–Ω–≥–∏–∑–¥–∞ start_text() —û—Ä–Ω–∏–≥–∞ unknown_command_text() —é–±–æ—Ä–∏–ª–∞–¥–∏.)

    ‚Ä¢ /reg <FISH>; <Viloyat>; <Shahar/Tuman>; <Telefon>; [Promkod]; [Til]
        –ê–≥–∞—Ä —Ñ–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏ –æ–ª–¥–∏–Ω —Ä—û–π—Ö–∞—Ç–¥–∞–Ω —û—Ç–≥–∞–Ω –±—û–ª—Å–∞ ‚Äî already_registered_text(lang, chat_id, phone) —é–±–æ—Ä–∏–ª–∞–¥–∏.
        –ê–∫—Å “≥–æ–ª–¥–∞ –±–µ–∫–µ–Ω–¥–≥–∞ {BACKEND_BASE_URL}/accounts/boss/register/ –≥–∞ JSON payload —é–±–æ—Ä–∏–ª–∞–¥–∏ –≤–∞
        “õ–∞–π—Ç–≥–∞–Ω ID/–ø–∞—Ä–æ–ª —Ñ–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏–≥–∞ –µ—Ç–∫–∞–∑–∏–ª–∞–¥–∏.

        –ú–∏—Å–æ–ª–ª–∞—Ä:
          /reg –ê—é–±–æ–≤ –≠–ª–±–µ–∫; “ö–∞—à“õ–∞–¥–∞—Ä—ë –≤–∏–ª–æ—è—Ç–∏; –ö–æ—Å–æ–Ω; +998991112233; uz
          /reg –ê—é–±–æ–≤ –≠–ª–±–µ–∫; “ö–∞—à“õ–∞–¥–∞—Ä—ë –≤–∏–ª–æ—è—Ç–∏; –ö–æ—Å–æ–Ω; +998991112233; ABC123; uz_lat

        –ò–∑–æ“≥:
          parse_lang_and_promkod(raw_parts) —ë—Ä–¥–∞–º—á–∏ —Ñ—É–Ω–∫—Ü–∏—è—Å–∏ –º–∞—Å—Å–∏–≤ –æ—Ö–∏—Ä–∏–¥–∞–Ω —Ç–∏–ª –≤–∞ –ø—Ä–æ–º–∫–æ–¥–Ω–∏ –∞–∂—Ä–∞—Ç–∏–± “õ–∞–π—Ç–∞—Ä–∞–¥–∏.
          –¢–∏–ª –∫–µ–ª–º–∞—Å–∞, –±–∞–∑–∞–¥–∞–≥–∏ lang —ë–∫–∏ "uz" “õ—û–ª–ª–∞–Ω–∞–¥–∏.

    ‚Ä¢ –ë–æ—à“õ–∞ –º–∞—Ç–Ω–ª–∞—Ä
        unknown_command_text(lang) —é–±–æ—Ä–∏–ª–∞–¥–∏.

    –ö–∏—Ä—É–≤—á–∏ –º–∞—ä–ª—É–º–æ—Ç (Telegram Update JSON)
    ---------------------------------------
    {
      "message": {
        "chat": {"id": <int>},
        "text": "<str>"
      }
    }

    –ß–µ—Ç–¥–∞–Ω –±–æ“ì–ª–∏“õ–ª–∏–∫–ª–∞—Ä
    -------------------
    ‚Ä¢ settings.TELEGRAM_BOT_TOKEN ‚Äî Telegram‚Äô–≥–∞ sendMessage —é–±–æ—Ä–∏—à —É—á—É–Ω
    ‚Ä¢ settings.BACKEND_BASE_URL   ‚Äî –±–µ–∫–µ–Ω–¥ API‚Äô—Å–∏–≥–∞ /accounts/boss/register/ POST “õ–∏–ª–∏—à —É—á—É–Ω

    “ö–∞–π—Ç–∞—Ä–∏–ª–∞–¥–∏–≥–∞–Ω –∂–∞–≤–æ–±
    --------------------
    JsonResponse({"ok": True}) ‚Äî –º—É–≤–∞—Ñ—Ñ–∞“õ–∏—è—Ç–ª–∏ –∏—à–ª–æ–≤–¥–∞–Ω —Å—û–Ω–≥ 200 —Å—Ç–∞—Ç—É—Å –±–∏–ª–∞–Ω.
    (Webhook —Ç–∞–ª–∞–±–∏–≥–∞ –∫—û—Ä–∞ Telegram 2xx –∫—É—Ç–∞–¥–∏; –∫–æ–¥–∏–Ω–≥–∏–∑–¥–∞ —Ö–∞—Ç–æ–ª–∏–∫ “õ–æ–ª—Å–∞ “≥–∞–º 200 “õ–∞–π—Ç–∞—Ä–∏—à —Ç–∞–≤—Å–∏—è —ç—Ç–∏–ª–∞–¥–∏.)

    –ü–∞—Ä–∞–º–µ—Ç—Ä–ª–∞—Ä
    -----------
    request : django.http.HttpRequest
        Telegram‚Äôdan –∫–µ–ª–≥–∞–Ω POST —Å—û—Ä–æ–≤.

    “ö–∞–π–¥–ª–∞—Ä
    -------
    ‚Ä¢ –¢–∏–ª accounts_business(lang) –¥–∞–Ω chat_id –±—û–π–∏—á–∞ –∞–Ω–∏“õ–ª–∞–Ω–∞–¥–∏.
    ‚Ä¢ send() –∏—á–∏–¥–∞ Telegram‚Äô–≥–∞ HTML parse_mode –±–∏–ª–∞–Ω —Ö–∞–±–∞—Ä —é–±–æ—Ä–∏–ª–∞–¥–∏.
    """
    # ... —Ñ—É–Ω–∫—Ü–∏—è –¥–∞–≤–æ–º–∏ ...

    data = json.loads(request.body.decode("utf-8") or "{}")
    msg  = data.get("message") or {}
    chat = msg.get("chat") or {}
    chat_id = chat.get("id")
    text = (msg.get("text") or "").strip()

    def send(txt: str):
        requests.post(
            f"https://api.telegram.org/bot{settings.TELEGRAM_BOT_TOKEN}/sendMessage",
            json={"chat_id": chat_id, "text": txt, "parse_mode": "HTML"},
            timeout=10,
        )

    if not chat_id:
        return JsonResponse({"ok": True})

    # --- lang'ni bazadan –æ–ª–∏—à (–∫—É—Ä—Å–æ—Ä –æ—á–∏–±)
    with connection.cursor() as cur:
        cur.execute("SELECT lang FROM public.accounts_business WHERE id=%s LIMIT 1", [chat_id])
        row = cur.fetchone()
    lang = (row[0] if row and row[0] else "uz")

    # /start ‚Äî 4 —Ç–∏–ª–¥–∞
    # if text.lower().startswith("/start"):
    #     send(unknown_command_text(lang))
    #     return JsonResponse({"ok": True})

    # /reg ‚Äî —Ä—û–π—Ö–∞—Ç–¥–∞–Ω —û—Ç–∫–∞–∑–∏—à
    if text.lower().startswith("/reg"):
        # 0) –∞–≤–≤–∞–ª–¥–∞–Ω –±–æ—Ä-—ë“õ–ª–∏–≥–∏–Ω–∏ —Ç–µ–∫—à–∏—Ä–∏—à
        with connection.cursor() as cur:
            cur.execute("SELECT boss_tel_num FROM public.accounts_business WHERE id=%s LIMIT 1", [chat_id])
            row = cur.fetchone()

        if row:
            phone = row[0]
            msg = already_registered_text(lang, chat_id, phone)  # ‚úÖ –º–∞—Ç–Ω–Ω–∏ –æ–ª–∞–º–∏–∑
            send(msg)            
            print("DBG:: already branch, chat_id=", chat_id)

            return JsonResponse(
            {
                "ok": True,
                "already": True,
                "id": chat_id,
                "phone": phone,
                "lang": lang,
                "message": msg,# ‚úÖ –ü–æ—Å—Ç–º–∞–Ω–≥–∞ “≥–∞–º —Ç—û–ª–∏“õ –º–∞—Ç–Ω
                "probe": "register_boss_api_v3" 
            },
            json_dumps_params={"ensure_ascii": False}  # ‚úÖ –ö–∏—Ä–∏–ª–ª–Ω–∏ –Ω–æ—Ä–º–∞–ª “õ–∞–π—Ç–∞—Ä–∏—à
        )

        # 1) —Ç–∏–ª –≤–∞ –ø—Ä–æ–º–∫–æ–¥–Ω–∏ –ø–∞—Ä—Å “õ–∏–ª–∏—à
        raw_parts = [p.strip() for p in text[5:].split(";")]
        parts, lang_param, promkod = parse_lang_and_promkod(raw_parts)  # sizdagi —ë—Ä–¥–∞–º—á–∏ —Ñ—É–Ω–∫—Ü–∏—è
        # if len(parts) < 4:
        #     # –µ—Ç–º–∞—Å–∞–¥–∞, –º–∞–≤–∂—É–¥/lang –±—û–π–∏—á–∞ —Å—Ç–∞—Ä—Ç —Ö–∞–±–∞—Ä–∏–Ω–∏ —é–±–æ—Ä–∏–± “õ—û—è–º–∏–∑
        #     send(unknown_command_text(lang))
        #     return JsonResponse({"ok": True})

        payload = {
            "tg_id": chat_id,
            "full_name": parts[0],
            "viloyat": parts[1],
            "shahar_yoki_tuman": parts[2],
            "phone": parts[3],
            # —Ç–∏–ª–Ω–∏ –±–µ–∫–µ–Ω–¥–≥–∞ “≥–∞–º —É–∑–∞—Ç–∞–º–∏–∑: –∫–µ–ª–≥–∞–Ω –±—û–ª—Å–∞ ‚Äî —à—É, –±—û–ª–º–∞—Å–∞ –º–∞–≤–∂—É–¥/lang
            "lang": (lang_param or lang),
        }
        if promkod:
            payload["promkod"] = promkod

        url = f"{settings.BACKEND_BASE_URL}/accounts/boss/register/"
        try:
            resp = requests.post(url, json=payload, timeout=12)
            if resp.status_code == 200:
                j = resp.json()
                send(
                    "Ro'yxatdan o'tdingiz ‚úÖ\n"
                    f"ID: <code>{j['id']}</code>\n"
                    f"Parol: <code>{j['password']}</code>"
                )
            else:
                send(f"Xatolik: {resp.text}")
        except Exception as e:
            send(f"Server bilan ulanishda xatolik: {e}")

        return JsonResponse({"ok": True})
    
    return JsonResponse({"ok": True, "created": True, "id": chat_id, "probe": "register_boss_api_v3"})


WEEKDAY_UZ_ABBR = ["du", "se", "ch", "pa", "ju", "sh", "ya"]

def _normalize_phone(raw: str) -> str:
    """
    –¢–µ–ª–µ—Ñ–æ–Ω —Ä–∞“õ–∞–º–∏–Ω–∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è “õ–∏–ª–∞–¥–∏.

    –ù–∏–º–∞ “õ–∏–ª–∞–¥–∏:
      - –ú–∞—Ç–Ω–¥–∞–Ω —Ä–∞“õ–∞–º–ª–∞—Ä –≤–∞ '+' –Ω–∏ —Å–∞“õ–ª–∞–± “õ–æ–ª–∞–¥–∏.
      - –ê–≥–∞—Ä —Ä–∞“õ–∞–º '998' –±–∏–ª–∞–Ω –±–æ—à–ª–∞–Ω—Å–∞ –≤–∞ –±–æ—à–∏–¥–∞ '+' –±—û–ª–º–∞—Å–∞ ‚Üí '+998‚Ä¶'–≥–∞ –∞–π–ª–∞–Ω—Ç–∏—Ä–∞–¥–∏.

    –ü–∞—Ä–∞–º–µ—Ç—Ä–ª–∞—Ä:
      raw (str): –§–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏ –∫–∏—Ä–∏—Ç–≥–∞–Ω —Ç–µ–ª–µ—Ñ–æ–Ω (—ç—Ä–∫–∏–Ω —Ñ–æ—Ä–º–∞—Ç–¥–∞).

    “ö–∞–π—Ç–∞—Ä–∏–ª–∞–¥–∏:
      str: –ù–æ—Ä–º–∞–ª–ª–∞—à–≥–∞–Ω —Ç–µ–ª–µ—Ñ–æ–Ω (–º–∞—Å–∞–ª–∞–Ω, '+998991234567'); —Ö–∞—Ç–æ/–±—û—à –±—û–ª—Å–∞ ‚Äî –±—û—à —Å–∞—Ç—Ä–∏.
    """
    
    if not raw: return ""
    s = re.sub(r"[^\d+]", "", str(raw))
    if not s: return ""
    if not s.startswith("+") and s.startswith("998"):
        s = "+" + s
    return s

def _make_password(user_id: int) -> str:
    """
    –í–∞“õ—Ç–∏–Ω—á–∞–ª–∏–∫ –ø–∞—Ä–æ–ª —è—Ä–∞—Ç–∞–¥–∏ (“õ–∏—Å“õ–∞, –∏–Ω—Å–æ–Ω —û“õ–∏–π–¥–∏–≥–∞–Ω —Ñ–æ—Ä–º–∞—Ç).

    –§–æ—Ä–º—É–ª–∞:
      <ID–Ω–∏–Ω–≥ –∏–ª–∫ 2 —Ä–∞“õ–∞–º–∏><–∫—É–Ω DD><–∞–π–Ω–∏ –º–∏–Ω—É—Ç –≤–∞ —Å–µ–∫—É–Ω–¥–Ω–∏–Ω–≥ –æ—Ö–∏—Ä–≥–∏ 1 —Ç–∞–¥–∞–Ω —Ä–∞–∫–∞–º–ª–∞—Ä–∏ MS><“≥–∞—Ñ—Ç–∞ –∫—É–Ω–∏ “õ–∏—Å“õ–∞—Ä—Ç–º–∞—Å–∏>

    –ú–∞—Å–∞–ª–∞–Ω:
      user_id=74213, —Å–∞–Ω–∞ 12-–∫—É–Ω, –∂—É–ºa ('Ju') ‚Üí '7412Ju'

    –≠—Å–ª–∞—Ç–º–∞:
      WEEKDAY_UZ_ABBR –∏–Ω–¥–µ–∫—Å–∏ 0‚Äì6 (–¥—É—à‚Äì—è–∫) –±—û–π–∏—á–∞ –∏—à–ª–∞–π–¥–∏.

    –ü–∞—Ä–∞–º–µ—Ç—Ä–ª–∞—Ä:
      user_id (int): –§–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏ (Telegram) ID‚Äô–∏.

    “ö–∞–π—Ç–∞—Ä–∏–ª–∞–¥–∏:
      str: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è “õ–∏–ª–∏–Ω–≥–∞–Ω –≤–∞“õ—Ç–∏–Ω—á–∞–ª–∏–∫ –ø–∞—Ä–æ–ª.
    """
    now = datetime.now()
    id2 = str(user_id).rjust(2, "0")[:2]           # ID–Ω–∏–Ω–≥ –∏–ª–∫ 2 —Ä–∞“õ–∞–º–∏ (–∫–∞–º –±—û–ª—Å–∞ 0 –±–∏–ª–∞–Ω —Ç—û–ª–¥–∏—Ä–∞–º–∏–∑)
    day = f"{now.day:02d}"                          # –∫—É–Ω DD
    m_last = str(now.minute)[-1]                    # –º–∏–Ω—É—Ç–Ω–∏–Ω–≥ –æ—Ö–∏—Ä–≥–∏ —Ä–∞“õ–∞–º–∏
    s_last = str(now.second)[-1]                    # —Å–µ–∫—É–Ω–¥–Ω–∏–Ω–≥ –æ—Ö–∏—Ä–≥–∏ —Ä–∞“õ–∞–º–∏
    wd = WEEKDAY_UZ_ABBR[now.weekday()]            # “≥–∞—Ñ—Ç–∞ –∫—É–Ω–∏ qisqartma

    return f"{id2}{day}{m_last}{s_last}{wd}"

def _send_tg_message(chat_id: int, text: str) -> tuple[bool, str]:
    """
    Telegram'–≥–∞ sendMessage —é–±–æ—Ä–∏—à (rate-limit‚Äô–Ω–∏ –∏–Ω–æ–±–∞—Ç–≥–∞ –æ–ª–≥–∞–Ω “≥–æ–ª–¥–∞).

    –ù–∏–º–∞ “õ–∏–ª–∞–¥–∏:
      - settings.TELEGRAM_BOT_TOKEN –æ—Ä“õ–∞–ª–∏ /sendMessage “õ–∏–ª–∞–¥–∏.
      - 429 (Too Many Requests) –±—û–ª—Å–∞, `retry_after` –≥–∞ “õ–∞—Ä–∞–± 1 –º–∞—Ä—Ç–∞ –∫–µ–π–∏–Ω—Ä–æ“õ “õ–∞–π—Ç–∞ —É—Ä–∏–Ω–∞–¥–∏.
      - –ò—Å—Ç–∏—Å–Ω–æ –∑–∞—Ä—É—Ä “≥–æ–ª–ª–∞—Ä–¥–∞ –∏—Å—Ç–∏—Å–Ω–æ —Ç–∞—à–ª–∞–º–∞–π–¥–∏ ‚Äî (False, —Å–∞–±–∞–±) “õ–∞–π—Ç–∞—Ä–∞–¥–∏.

    –ü–∞—Ä–∞–º–µ—Ç—Ä–ª–∞—Ä:
      chat_id (int): “ö–∞–±—É–ª “õ–∏–ª—É–≤—á–∏ —á–∞—Ç ID‚Äô–∏.
      text (str): –Æ–±–æ—Ä–∏–ª–∞–¥–∏–≥–∞–Ω —Ö–∞–±–∞—Ä (HTML parse_mode).

    “ö–∞–π—Ç–∞—Ä–∏–ª–∞–¥–∏:
      tuple[bool, str]:
        - 1-—ç–ª–µ–º–µ–Ω—Ç: –º—É–≤–∞—Ñ—Ñ–∞“õ–∏—è—Ç (True/False)
        - 2-—ç–ª–µ–º–µ–Ω—Ç: Telegram –∂–∞–≤–æ–±–∏ –º–∞—Ç–Ω–∏ —ë–∫–∏ —Å–∞–±–∞–± ('NO_TOKEN', 'REQUEST_ERROR: ‚Ä¶', –≤–∞ “≥.–∫.)

    –≠—Å–ª–∞—Ç–º–∞:
      `disable_web_page_preview=True` ‚Äî “≥–∞–≤–æ–ª–∞ –ø—Ä–µ–≤—å—é–ª–∞—Ä–∏ —û—á–∏—Ä–∏–ª–≥–∞–Ω.
    """
    token = getattr(settings, "TELEGRAM_BOT_TOKEN", "") or ""
    if not token:
        return False, "NO_TOKEN"
    url = f"https://api.telegram.org/bot{token}/sendMessage"
    payload = {"chat_id": chat_id, "text": text, "parse_mode": "HTML", "disable_web_page_preview": True}
    for attempt in range(2):
        try:
            r = requests.post(url, json=payload, timeout=10)
            if r.status_code == 429:
                retry = (r.json().get("parameters", {}) or {}).get("retry_after", 2)
                time.sleep(int(retry)); continue
            return (r.status_code == 200 and r.json().get("ok") is True), r.text
        except requests.RequestException as e:
            if attempt == 0: time.sleep(2); continue
            return False, f"REQUEST_ERROR: {e}"
    return False, "UNKNOWN_ERROR"

@csrf_exempt
def register_boss(request: HttpRequest, payload: str = ""):
    """
    BOSS (biznes egasi) foydalanuvchisini ro‚Äòyxatdan o‚Äòtkazish va unga Telegram xabarini yuborish.

    Kirish formatlari:
      1) payload (botdan keladigan qisqa format):
         "tg_id/full_name/viloyat/nomi/phone[/promkod]"
      2) JSON/POST (frontend yoki botdan JSON):
         {
           "tg_id": int,
           "full_name": str,
           "viloyat": str,
           "shahar_yoki_tuman": str,
           "phone": str,
           "promkod": str | null,      # ixtiyoriy
           "lang": "uz|uz_lat|ru|en"   # ixtiyoriy, default 'uz'
         }

    Asosiy qadamlari:
      ‚Ä¢ Tilni (lang) tekshirish: {'uz','uz_lat','ru','en'}; noto‚Äòg‚Äòri bo‚Äòlsa ‚Äî 'uz'.
      ‚Ä¢ Dublikat ID bor-yo‚Äòqligini tekshirish (accounts_business.id).
      ‚Ä¢ geo_list bo‚Äòyicha 'nomi' shaharmi/tumanmi aniqlash.
      ‚Ä¢ Promkod kelsa ‚Äî agent_account dan agentni topish.
      ‚Ä¢ accounts_business ga UPSERT:
          (id, name, viloyat, shaxar, tuman, boss_tel_num, agent_name, agent_promkod, lang)
      ‚Ä¢ Parolni `_make_password()` orqali yaratish va bazaga HASH (make_password) bilan saqlash.
      ‚Ä¢ Promkod bo‚Äòlsa ‚Äî agent_account.business_id JSONB ga biriktirish.
      ‚Ä¢ So‚Äòng foydalanuvchiga Telegram orqali tayyor matn yuborish.

    Qaytaradi:
      200 OK, JSON:
        - {"ok": True, "id": <int>, "password": <str>, "tg_sent": <bool>}
        - Agar avvaldan mavjud bo‚Äòlsa: {"ok": True, "already": True, "id": tg_id, ...}

    Eslatma:
      ‚Ä¢ Telefon `_normalize_phone()` bilan tozalanadi.
      ‚Ä¢ Xabar matni Telegram‚Äôda HTML parse_mode bilan yuboriladi.

    Audit:
      ‚Ä¢ Muvaffaqiyatli ro‚Äòyxatdan o‚Äòtganida:  audit_log("reg_ok", request, actor_id=new_id, status=200)
      ‚Ä¢ Avvaldan ro‚Äòyxatdan o‚Äòtgan bo‚Äòlsa:    audit_log("reg_already", request, actor_id=chat_id, status=200)
    """
    try:
        print("DBG:: ENTER register_boss, __file__=", __file__)

        # 1) JSON body‚Äôni xavfsiz parse qilish
        data = {}
        try:
            raw = request.body or b""
            if isinstance(raw, (bytes, bytearray)):
                raw = raw.decode("utf-8", errors="ignore")
            data = json.loads(raw or "{}")
        except Exception as e:
            print("DBG:: JSON parse error:", e)

        # 2) tg_id ni turli manbadan olish
        tg_id_in = (
            (data.get("tg_id") if isinstance(data, dict) else None)
            or request.GET.get("tg_id")
            or request.headers.get("X-Telegram-Id")
        )
        try:
            chat_id = int(tg_id_in)
        except Exception:
            return JsonResponse({"detail": "tg_id —Ç–∞–ª–∞–± “õ–∏–ª–∏–Ω–∞–¥–∏."}, status=400)

        # 3) payload –≤–∞ —Ç–∏–ª–Ω–∏ –π–∏“ì–∏—à
        payload_text = (
            (data.get("payload") or "")
            or (request.POST.get("payload") if hasattr(request, "POST") else "")
            or (request.GET.get("payload") or "")
        ).strip()

        # –¢–∏–ª–Ω–∏ —Ç–æ–ø–∏—à: payload –æ—Ö–∏—Ä–∏–¥–∞–≥–∏ ;lang —ë–∫–∏ Accept-Language
        _lang_from_payload = ""
        if ";" in payload_text:
            last_piece = payload_text.split(";")[-1].strip().lower()
            if last_piece in {"uz", "uz_lat", "ru", "en"}:
                _lang_from_payload = last_piece

        lang = _lang_from_payload or (request.headers.get("Accept-Language", "uz") or "uz").split(",")[0].strip().lower()
        if lang not in {"uz", "uz_lat", "ru", "en"}:
            lang = "uz"

        # 4) –û–ª–¥–∏–Ω–¥–∞–Ω –±–æ—Ä–º–∏ ‚Äî —Ç–µ–∫—à–∏—Ä–∏—à (—û—à–∞ “õ–æ–ª—Å–∏–Ω)
        with connection.cursor() as cur:
            cur.execute("SELECT boss_tel_num FROM public.accounts_business WHERE id=%s LIMIT 1", [chat_id])
            row = cur.fetchone()

        if row:
            phone_existing = row[0] or ""
            msg = already_registered_text(lang, chat_id, phone_existing)
            audit_log("reg_already", request, actor_id=chat_id, status=200, meta={"phone": phone_existing})
            return JsonResponse(
                {"ok": True, "already": True, "id": chat_id, "phone": phone_existing, "lang": lang, "message": msg},
                json_dumps_params={"ensure_ascii": False}
            )

        # --- input parsing (payload —ë–∫–∏ JSON)
        tg_id = full_name = viloyat = nomi = phone = promkod = None
        source = "payload" if payload_text else "json"

        if payload_text:
            rp = payload_text

            # "/reg" –ø—Ä–µ—Ñ–∏–∫—Å–∏–Ω–∏ –æ–ª–¥–∏—Ä–∞–¥–∏
            if rp.lower().startswith("/reg"):
                rp = rp[4:].strip()

            # 1) "–§–ò–®; –í–∏–ª–æ—è—Ç; –¢—É–º–∞–Ω; –¢–µ–ª–µ—Ñ–æ–Ω; [til]; [promkod]" —Ñ–æ—Ä–º–∞—Ç–∏
            if ";" in rp:
                parts = [p.strip() for p in rp.split(";") if p.strip()]
                if len(parts) < 4:
                    return JsonResponse({"detail": "–ú–∞—ä–ª—É–º–æ—Ç –µ—Ç–∞—Ä–ª–∏ —ç–º–∞—Å (payload ;)"} , status=400)

                full_name, viloyat, nomi, phone = parts[0], parts[1], parts[2], parts[3]
                # 5-—ç–ª–µ–º–µ–Ω—Ç —Ç–∏–ª –±—û–ª–∏—à–∏ –º—É–º–∫–∏–Ω ‚Äî —é“õ–æ—Ä–∏–¥–∞ –∞–∂—Ä–∞—Ç–∏–± –æ–ª–≥–∞–Ω–º–∏–∑
                # 6-—ç–ª–µ–º–µ–Ω—Ç –ø—Ä–æ–º–∫–æ–¥ –±—û–ª–∏—à–∏ –º—É–º–∫–∏–Ω
                if len(parts) >= 6 and parts[5]:
                    promkod = parts[5]

                # tg_id payload‚Äô–¥–∞ –±–µ—Ä–∏–ª–º–∞—Å–∞, —á–∞—Ç–¥–∞–Ω –æ–ª–≥–∞–Ω–∏–º–∏–∑–Ω–∏ “õ—û–π—è–º–∏–∑
                tg_id = chat_id

            else:
                # 2) "tg_id/full_name/viloyat/nomi/phone[/promkod]" —Ñ–æ—Ä–º–∞—Ç–∏
                parts = [p.strip() for p in rp.split("/") if p.strip()]
                if len(parts) < 5:
                    return JsonResponse({"detail": "–ú–∞—ä–ª—É–º–æ—Ç –µ—Ç–∞—Ä–ª–∏ —ç–º–∞—Å (payload /)"} , status=400)

                # –ê–≥–∞—Ä –±–∏—Ä–∏–Ω—á–∏ “õ–∏–π–º–∞—Ç —Ä–∞“õ–∞–º –±—û–ª–º–∞—Å–∞ ‚Äî —á–∞—Ç–¥–∞–Ω –æ–ª–≥–∞–Ω–∏–º–∏–∑–Ω–∏ “õ—û–π–∏–±, –§–ò–®–¥–∞–Ω –±–æ—à–ª–∞–π–º–∏–∑
                try:
                    tg_id = int(parts[0])
                    idx = 1
                except Exception:
                    tg_id = chat_id
                    idx = 0

                full_name = parts[idx]
                viloyat   = parts[idx + 1]
                nomi      = parts[idx + 2]
                phone     = parts[idx + 3]
                promkod   = parts[idx + 4] if len(parts) > idx + 4 and parts[idx + 4] else None

        else:
            # –¢—û–ª–∏“õ JSON –º–∞–π–¥–æ–Ω–ª–∞—Ä–∏
            try:
                tg_id     = int(data.get("tg_id"))
            except Exception:
                tg_id     = chat_id  # –∑–∞—Ö–∏—Ä–∞ —Å–∏—Ñ–∞—Ç–∏–¥–∞
            full_name = (data.get("full_name") or "").strip()
            viloyat   = (data.get("viloyat") or "").strip()
            nomi      = (data.get("shahar_yoki_tuman") or "").strip()
            phone     = (data.get("phone") or "").strip()
            promkod   = (data.get("promkod") or None) or None

        # –§–∏–Ω–∞–ª —Ç–µ–∫—à–∏—Ä—É–≤
        if not all([tg_id, full_name, viloyat, nomi, phone]):
            return JsonResponse({"detail": "–ú–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä —Ç—û–ª–∏“õ —ç–º–∞—Å."}, status=400)

        phone_norm = _normalize_phone(phone)


        # --- DB (UPSERT logikasi)
        with connection.cursor() as cur:
            # 0) kerak bo‚Äòlsa lang ustunini yaratib qo‚Äòyamiz
            cur.execute("""
                DO $$
                BEGIN
                    IF NOT EXISTS (
                        SELECT 1 FROM information_schema.columns
                        WHERE table_schema='public' AND table_name='accounts_business' AND column_name='lang'
                    ) THEN
                        ALTER TABLE public.accounts_business ADD COLUMN lang varchar(10);
                        CREATE INDEX IF NOT EXISTS idx_business_lang ON public.accounts_business(lang);
                    END IF;
                END $$;
            """)

            # 1) geo_list dan turini aniqlash
            cur.execute("""
                SELECT shaxar_yoki_tuman
                  FROM public.geo_list
                 WHERE lower(viloyat)=lower(%s)
                   AND lower(shaxar_yoki_tuman_nomi)=lower(%s)
                 LIMIT 1
            """, [viloyat.strip(), nomi.strip()])
            geo_row = cur.fetchone()
            print("geo_row", geo_row)
            if not geo_row:
                return JsonResponse({"detail": f"geo_list –¥–∞ —Ç–æ–ø–∏–ª–º–∞–¥–∏: {viloyat} / {nomi}"}, status=404)

            turi = geo_row[0]
            shahar = nomi if turi == "—à–∞“≥–∞—Ä" else None
            tuman  = nomi if turi == "—Ç—É–º–∞–Ω" else None

            # 2) promkod bo‚Äòlsa ‚Äî agent ma‚Äôlumotini olish
            agent_name = None
            if promkod:
                cur.execute("SELECT id, agent_name FROM public.agent_account WHERE agent_promkod=%s LIMIT 1", [promkod])
                a = cur.fetchone()
                if not a:
                    return JsonResponse({"detail": "–ü—Ä–æ–º–∫–æ–¥ —Ç–æ–ø–∏–ª–º–∞–¥–∏."}, status=400)
                agent_name = a[1]

            # 3) accounts_business UPSERT ‚Äî tilni ham saqlaymiz
            cur.execute("""
                INSERT INTO public.accounts_business
                    (id, name, viloyat, shaxar, tuman, boss_tel_num, agent_name, agent_promkod, lang)
                VALUES (%s,%s,%s,%s,%s,%s,%s,%s,%s)
                ON CONFLICT (id) DO UPDATE SET
                    name=EXCLUDED.name,
                    viloyat=EXCLUDED.viloyat,
                    shaxar=EXCLUDED.shaxar,
                    tuman=EXCLUDED.tuman,
                    boss_tel_num=EXCLUDED.boss_tel_num,
                    agent_name=COALESCE(EXCLUDED.agent_name, public.accounts_business.agent_name),
                    agent_promkod=COALESCE(EXCLUDED.agent_promkod, public.accounts_business.agent_promkod),
                    lang=EXCLUDED.lang
                RETURNING id
            """, [tg_id, full_name, viloyat, shahar, tuman, phone_norm, agent_name, promkod, lang])
            user_id = int(cur.fetchone()[0])

            # 4) parolni yaratish va HASH saqlash
            password_raw = _make_password(user_id)
            password_hash = make_password(password_raw)
            cur.execute("UPDATE public.accounts_business SET password=%s WHERE id=%s", [password_hash, user_id])

            # 5) agent JSONB biriktirish (ixtiyoriy)
            if promkod:
                cur.execute("""
                    UPDATE public.agent_account
                       SET business_id = COALESCE(business_id, '{}'::jsonb)
                                         || jsonb_build_object(%s::text, %s::text)
                     WHERE agent_promkod=%s
                """, [full_name, str(tg_id), promkod])

        # ‚úÖ AUDIT ‚Äî muvaffaqiyatli ro‚Äòyxatdan o‚Äòtdi
        audit_log("reg_ok", request, actor_id=user_id, status=200,
                  meta={"phone": phone_norm, "lang": lang, "source": source, "promkod": promkod})

        # --- Telegram xabar (lang bo‚Äòyicha)
        messages = {
            "uz": (
                f"“≤—É—Ä–º–∞—Ç–ª–∏ —Ñ–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏, —Å–∏–∑ <code>{tg_id}</code> ID —Ä–∞“õ–∞–º–∏ –±–∏–ª–∞–Ω —Ä—û–π—Ö–∞—Ç–¥–∞–Ω —û—Ç–¥–∏–Ω–≥–∏–∑ ‚úÖ\n\n"
                f"üõ° –°–∏–∑–Ω–∏–Ω–≥ –≤–∞“õ—Ç–∏–Ω—á–∞–ª–∏–∫ –ø–∞—Ä–æ–ª–∏–Ω–≥–∏–∑:\nüîë <code>{password_raw}</code>\n\n"
                f"üõ° –°–∏–∑–Ω–∏–Ω–≥ –∫–æ–Ω—Ç–∞–∫—Ç–∏–Ω–≥–∏–∑:\nüìû <code>{phone_norm}</code>\n\n"
                f"üõ° –°–∏–∑ <code>BOSS (–±–∏–∑–Ω–µ—Å—Å —ç–≥–∞—Å–∏)</code> —Ñ–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏ —Ç—É—Ä–∏–¥–∞ —Ä—û–π—Ö–∞—Ç–¥–∞–Ω —û—Ç–¥–∏–Ω–≥–∏–∑.\n\n"
                f"–ò–ª–æ–≤–∞–Ω–∏–Ω–≥ ‚Äú–•–∞–≤—Ñ—Å–∏–∑–ª–∏–∫ ‚Üí –ü–∞—Ä–æ–ª–Ω–∏ —û–∑–≥–∞—Ä—Ç–∏—Ä–∏—à‚Äù –±—û–ª–∏–º–∏ –æ—Ä“õ–∞–ª–∏ —û–∑ –ø–∞—Ä–æ–ª–∏–Ω–≥–∏–∑–Ω–∏ —è–Ω–≥–∏–ª–∞—à–Ω–∏ —Ç–∞–≤—Å–∏—è “õ–∏–ª–∞–º–∏–∑."
            ),
            "uz_lat": (
                f"Hurmatli foydalanuvchi, siz <code>{tg_id}</code> ID raqami bilan ro‚Äòyxatdan o‚Äòtdingiz ‚úÖ\n\n"
                f"üõ° Sizning vaqtinchalik parolingiz:\nüîë <code>{password_raw}</code>\n\n"
                f"üõ° Sizning kontaktingiz:\nüìû <code>{phone_norm}</code>\n\n"
                f"üõ° Siz <code>BOSS (biznes egasi)</code> foydalanuvchi turida ro‚Äòyxatdan o‚Äòtdingiz.\n\n"
                f"Ilovaning ‚ÄúXavfsizlik ‚Üí Parolni o‚Äòzgartirish‚Äù bo‚Äòlimi orqali o‚Äòz parolingizni yangilashingizni tavsiya qilamiz."
            ),
            "ru": (
                f"–£–≤–∞–∂–∞–µ–º—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å —Å ID <code>{tg_id}</code> ‚úÖ\n\n"
                f"üõ° –í–∞—à –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å:\nüîë <code>{password_raw}</code>\n\n"
                f"üõ° –í–∞—à –∫–æ–Ω—Ç–∞–∫—Ç:\nüìû <code>{phone_norm}</code>\n\n"
                f"üõ° –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ <code>BOSS (–≤–ª–∞–¥–µ–ª–µ—Ü –±–∏–∑–Ω–µ—Å–∞)</code>.\n\n"
                f"–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å ‚Üí –°–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å¬ª."
            ),
            "en": (
                f"Dear user, you have successfully registered with ID <code>{tg_id}</code> ‚úÖ\n\n"
                f"üõ° Your temporary password:\nüîë <code>{password_raw}</code>\n\n"
                f"üõ° Your contact:\nüìû <code>{phone_norm}</code>\n\n"
                f"üõ° You are registered as <code>BOSS (business owner)</code>.\n\n"
                f"We recommend changing your password in the app section ‚ÄúSecurity ‚Üí Change Password‚Äù."
            ),
        }
        text_to_send = messages.get(lang, messages["uz"])

        sent_ok, _meta = _send_tg_message(tg_id, text_to_send)

        return JsonResponse(
            {"ok": True, "id": user_id, "password": password_raw, "tg_sent": sent_ok},
            status=200,
            json_dumps_params={"ensure_ascii": False},
        )

    except Exception as e:
        return JsonResponse({"detail": f"–ò—á–∫–∏ —Ö–∞—Ç–æ–ª–∏–∫: {e}"}, status=500)
    
# –ü–∞—Ä–æ–ª–Ω–∏ –∞–ª–º–∞—à—Ç–∏—Ä–∏—à —Ö–∞–±–∞—Ä–∏    
VERIFY_CODE_TTL_SECONDS = 180  # 3 –¥–∞“õ–∏“õ–∞
MAX_CODE_ATTEMPTS = 5

def _forgot_code_text(lang: str, code: str) -> str:
    msgs = {
        "uz":     f"–ü–∞—Ä–æ–ª–Ω–∏ —è–Ω–≥–∏–ª–∞—à —É—á—É–Ω 4 —Ö–æ–Ω–∞–ª–∏ –∫–æ–¥: <code>{code}</code>\n–ö–æ–¥ 3 –¥–∞“õ–∏“õ–∞ –¥–∞–≤–æ–º–∏–¥–∞ –∞–º–∞–ª “õ–∏–ª–∞–¥–∏. –ò–ª–æ–≤–∞–¥–∞–≥–∏ ‚Äú–í–∞“õ—Ç–∏–Ω—á–∞–ª–∏–∫ –∫–æ–¥ –∫–∏—Ä–∏—Ç–∏—à‚Äù —Å–∞“≥–∏—Ñ–∞—Å–∏–≥–∞ —à—É –∫–æ–¥–Ω–∏ –∫–∏—Ä–∏—Ç–∏–Ω–≥.",
        "uz_lat": f"Parolni yangilash uchun 4 xonali kod: <code>{code}</code>\nKod 3 daqiqa amal qiladi. Ilovadagi ‚ÄúVaqtinchalik kod kiritish‚Äù sahifasiga shu kodni kiriting.",
        "ru":     f"–ö–æ–¥ –¥–ª—è —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è: <code>{code}</code>\n–ö–æ–¥ –¥–µ–π—Å—Ç–≤—É–µ—Ç 3 –º–∏–Ω—É—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –µ–≥–æ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ¬´–í—Ä–µ–º–µ–Ω–Ω—ã–π –∫–æ–¥¬ª.",
        "en":     f"Password reset code: <code>{code}</code>\nThe code is valid for 3 minutes. Enter it in the app on the ‚ÄúTemporary code‚Äù page.",
    }
    return msgs.get(lang, msgs["uz"])

def _forgot_password_text(lang: str, password: str) -> str:
    msgs = {
        "uz":     f"–°–∏–∑ –ø–∞—Ä–æ–ª–Ω–∏ —è–Ω–≥–∏–ª–∞–¥–∏–Ω–≥–∏–∑.\n–í–∞“õ—Ç–∏–Ω—á–∞–ª–∏–∫ –ø–∞—Ä–æ–ª: <code>{password}</code>\n\n–ò–ª–æ–≤–∞–Ω–∏–Ω–≥ ‚Äú–•–∞–≤—Ñ—Å–∏–∑–ª–∏–∫ ‚Üí –ü–∞—Ä–æ–ª–Ω–∏ —û–∑–≥–∞—Ä—Ç–∏—Ä–∏—à‚Äù –±—û–ª–∏–º–∏ –æ—Ä“õ–∞–ª–∏ —û–∑ –ø–∞—Ä–æ–ª–∏–Ω–≥–∏–∑–Ω–∏ —è–Ω–≥–∏–ª–∞–Ω.",
        "uz_lat": f"Siz parolni yangiladingiz.\nVaqtinchalik parol: <code>{password}</code>\n\nIlovaning ‚ÄúXavfsizlik ‚Üí Parolni o‚Äòzgartirish‚Äù bo‚Äòlimi orqali o‚Äòz parolingizni yangilang.",
        "ru":     f"–í—ã –æ–±–Ω–æ–≤–∏–ª–∏ –ø–∞—Ä–æ–ª—å.\n–í—Ä–µ–º–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å: <code>{password}</code>\n\n–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º —Å–º–µ–Ω–∏—Ç—å –µ–≥–æ –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å ‚Üí –°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è¬ª.",
        "en":     f"Your password was reset.\nTemporary password: <code>{password}</code>\n\nPlease change it in ‚ÄúSecurity ‚Üí Change password‚Äù.",
    }
    return msgs.get(lang, msgs["uz"])

#–∫–æ–¥ —é–±–æ—Ä–∏—à —ç–Ω–¥–ø–æ–∏–Ω—Ç–∏
@csrf_exempt
def forgot_boss_password_start(request):
    """
    Body: { "id": <int> }  —ë–∫–∏  { "boss_tel_num": "<str>" } (alias: "phone")
    Query: ?id=... —ë–∫–∏ ?boss_tel_num=... “≥–∞–º –∏—à–ª–∞–π–¥–∏.
    """
    # --- Robust parsing ---
    raw_text = (request.body or b"").decode("utf-8", errors="ignore")
    data = {}
    try:
        data = json.loads(raw_text) if raw_text.strip() else {}
    except Exception:
        # JSON –±—û–ª–º–∞—Å–∞, POST —Ñ–æ—Ä–º–∞–¥–∞–Ω –æ–ª–∞–º–∏–∑
        pass
    # –§–æ—Ä–º-–¥–∞—Ç–∞–¥–∞–Ω “≥–∞–º —û“õ–∏–± “õ—û—è–º–∏–∑ (JSON –∫–µ–ª–º–∞–≥–∞–Ω –±—û–ª—Å–∞)
    if not data and request.POST:
        data = request.POST.dict()

    raw_id    = data.get("id") or request.GET.get("id")
    raw_phone = (
        data.get("boss_tel_num") or data.get("phone")
        or request.GET.get("boss_tel_num") or request.GET.get("phone")
    )

    chat_id = None
    lang = "uz"
    boss_phone = ""

    if not (raw_id or raw_phone):
        audit_log("fp_start_fail", request, actor_id=None, status=400,
                  meta={"reason": "id_or_phone_required", "raw_preview": raw_text[:512]})
        return JsonResponse({"detail": "id —ë–∫–∏ boss_tel_num —Ç–∞–ª–∞–± “õ–∏–ª–∏–Ω–∞–¥–∏."}, status=400)

    with connection.cursor() as cur:
        if raw_id:
            try:
                chat_id = int(str(raw_id).strip())
            except Exception:
                audit_log("fp_start_fail", request, actor_id=None, status=400,
                          meta={"reason": "bad_id_format", "raw_id": raw_id})
                return JsonResponse({"detail": "id –Ω–æ—Ç—û“ì—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–¥–∞."}, status=400)

            # Eslatma: –±—É –µ—Ä–¥–∞ id ‚Äî business.id (Telegram chat_id —ç–º–∞—Å!)
            cur.execute(
                """
                SELECT id, COALESCE(lang,'uz'), COALESCE(boss_tel_num,'')
                FROM public.accounts_business WHERE id=%s LIMIT 1
                """,
                [chat_id]
            )
            row = cur.fetchone()
            if not row:
                audit_log("fp_start_fail", request, actor_id=chat_id, status=404,
                          meta={"reason": "user_not_found_by_id"})
                return JsonResponse({"detail": "–§–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏ —Ç–æ–ø–∏–ª–º–∞–¥–∏."}, status=404)
            chat_id, lang, boss_phone = row

        else:
            phone = _normalize_phone(raw_phone) if "_normalize_phone" in globals() \
                    else _normalize_phone_fallback(raw_phone)
            cur.execute(
                """
                SELECT id, COALESCE(lang,'uz'), COALESCE(boss_tel_num,'')
                FROM public.accounts_business WHERE boss_tel_num=%s
                """,
                [phone]
            )
            rows = cur.fetchall()
            if not rows:
                audit_log("fp_start_fail", request, actor_id=None, status=404,
                          meta={"reason": "user_not_found_by_phone", "phone": phone})
                return JsonResponse({"detail": "–£—à–±—É —Ç–µ–ª–µ—Ñ–æ–Ω –±—û–π–∏—á–∞ “≥–∏—Å–æ–± —Ç–æ–ø–∏–ª–º–∞–¥–∏."}, status=404)
            if len(rows) > 1:
                audit_log("fp_start_fail", request, actor_id=None, status=409,
                          meta={"reason": "multiple_accounts_for_phone", "phone": phone})
                return JsonResponse({"detail": "–ë—É —Ç–µ–ª–µ—Ñ–æ–Ω–≥–∞ –±–∏—Ä –Ω–µ—á—Ç–∞ “≥–∏—Å–æ–± –±–æ—Ä. –ò–ª—Ç–∏–º–æ—Å ID –∫–∏—Ä–∏—Ç–∏–Ω–≥."}, status=409)
            chat_id, lang, boss_phone = rows[0]       

    # 4 —Ö–æ–Ω–∞–ª–∏ –∫–æ–¥
    code = "".join(secrets.choice(string.digits) for _ in range(4))
    expires_at = timezone.now() + timezone.timedelta(seconds=VERIFY_CODE_TTL_SECONDS)

    # –±–∞–∑–∞–¥–∞ —Å–∞“õ–ª–∞—à
    with connection.cursor() as cur:
        cur.execute(
            "UPDATE public.accounts_business "
            "SET reset_code=%s, reset_code_expires_at=%s, reset_code_attempts=0 "
            "WHERE id=%s",
            [code, expires_at, chat_id]
        )

    # ‚ùóÔ∏è–ê–£–î–ò–¢: –º—É–≤–∞—Ñ—Ñ–∞“õ–∏—è—Ç–ª–∏ —Å—Ç–∞—Ä—Ç (–∫–æ–¥ –±–∞–∑–∞–¥–∞ —Å–∞“õ–ª–∞–Ω–¥–∏)
    audit_log("fp_start", request, actor_id=chat_id, status=200,
              meta={"expires_in": VERIFY_CODE_TTL_SECONDS})

    # –¢–µ–ª–µ–≥—Ä–∞–º–≥–∞ –≤–∞“õ—Ç–∏–Ω—á–∞–ª–∏–∫ –∫–æ–¥–Ω–∏ —é–±–æ—Ä–∏—à (—Ç–µ–ª–µ–≥—Ä–∞–º–≥–∞ –∫–µ—Ç–º–∞—Å–∞ “≥–∞–º 200 –±–µ—Äa—Å–∏–∑ ‚Äî –ª–µ–∫–∏–Ω –∞—É–¥–∏—Ç–∏–Ω–∏–∑–¥–∞ –±–µ–ª–≥–∏–ª–∞–± “õ—û–π–∏–Ω–≥)
    send_text = _forgot_code_text(lang, code)
    sent, meta = _send_tg_message(chat_id, send_text)

    # (–∏—Ö—Ç–∏—ë—Ä–∏–π) –∞–≥–∞—Ä —Ç–µ–ª–µ–≥—Ä–∞–º —é–±–æ—Ä–∏—à –æ–º–∞–¥—Å–∏–∑ –±—û–ª—Å–∞, –∞–ª–æ“≥–∏–¥–∞ –∞—É–¥–∏—Ç —ë–∑—É–≤–∏:
    if not sent:
        audit_log("fp_start_warn", request, actor_id=chat_id, status=200,
                  meta={"reason": "telegram_send_failed", "tg_meta": meta})

    return JsonResponse(
        {
            "ok": True,
            "id": chat_id,
            "boss_tel_num": boss_phone,
            "lang": lang,
            "telegram": {"sent": sent},
            "expires_in": VERIFY_CODE_TTL_SECONDS,
            "postmen_msg": meta
        },
        json_dumps_params={"ensure_ascii": False}
    )

def _normalize_phone_fallback(raw: str) -> str:
    """
    –¢–µ–ª–µ—Ñ–æ–Ω —Ä–∞“õ–∞–º–∏–Ω–∏ –Ω–æ—Ä–º–∞–ª–ª–∞—à—Ç–∏—Ä–∏—à: —Ñ–∞“õ–∞—Ç —Ä–∞“õ–∞–º –≤–∞ '+' “õ–æ–ª–¥–∏—Ä–∞–º–∏–∑,
    –é–∑–±–µ–∫–∏—Å—Ç–æ–Ω —Ñ–æ—Ä–º–∞—Ç–∏–¥–∞ –±—û–ª—Å–∞ +998 –ø—Ä–µ—Ñ–∏–∫—Å–Ω–∏ “õ—û–π–∏–± “õ—û—è–º–∏–∑.
    """
    if not raw:
        return ""
    s = "".join(ch for ch in str(raw) if ch.isdigit() or ch == "+")
    # allaqachon + bilan bo'lsa ‚Äî qaytaramiz
    if s.startswith("+"):
        return s
    # 998 bilan boshlangan bo'lsa ‚Äî +998... ga aylantiramiz
    if s.startswith("998"):
        return "+" + s
    # 00 bilan boshlansa (xalqaro) ‚Üí 00 ni olib tashlab qaytaramiz
    if s.startswith("00") and len(s) > 2:
        s = s[2:]
        if s.startswith("998"):
            return "+" + s
    return s


# –ü–∞—Ä–æ–ª–Ω–∏ –∞–ª–º–∞—à—Ç–∏—Ä–∏—à —Ö–∞–±–∞—Ä–∏–Ω–∏ —é–±–æ—Ä–∏—à –≤–∞ —Å–∞–∫–ª–∞—à —Ñ—É–Ω–∫—Ü–∏—è—Å–∏
@csrf_exempt
def forgot_boss_password_verify(request):
    """
    Body: { "id": <int>, "code": "1234" }  —ë–∫–∏  { "boss_tel_num": "<str>", "code": "1234" }
    """
    try:
        data = json.loads((request.body or b"").decode("utf-8") or "{}")
    except Exception:
        data = {}

    code = (data.get("code") or "").strip()
    if not (code.isdigit() and len(code) == 4):
        # –∞—É–¥–∏—Ç: –∫–æ–¥ —Ñ–æ—Ä–º–∞—Ç–∏ —Ö–∞—Ç—Ç–æ
        audit_log("fp_verify_fail", request, actor_id=None, status=400,
                  meta={"reason": "bad_code_format", "code": code})
        return JsonResponse({"detail": _code_err("uz", "wrong")}, status=400)  # —Ç–∏–ª –Ω–æ–º–∞—ä–ª—É–º, uz'–≥–∞ —Ñ–æ–ª–ª–±–µ–∫

    raw_id    = data.get("id") or request.GET.get("id")
    raw_phone = data.get("boss_tel_num") or data.get("phone") \
             or request.GET.get("boss_tel_num") or request.GET.get("phone")

    chat_id = None
    lang = "uz"

    with connection.cursor() as cur:
        if raw_id:
            try:
                chat_id = int(str(raw_id).strip())
            except Exception:
                audit_log("fp_verify_fail", request, actor_id=None, status=400,
                          meta={"reason": "bad_id_format", "raw_id": raw_id})
                return JsonResponse({"detail": "id –Ω–æ—Ç—û“ì—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–¥–∞."}, status=400)

            cur.execute(
                "SELECT COALESCE(lang,'uz'), reset_code, reset_code_expires_at, reset_code_attempts "
                "FROM public.accounts_business WHERE id=%s LIMIT 1",
                [chat_id],
            )
            row = cur.fetchone()
            if not row:
                audit_log("fp_verify_fail", request, actor_id=chat_id, status=404,
                          meta={"reason": "user_not_found_by_id"})
                return JsonResponse({"detail": "–§–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏ —Ç–æ–ø–∏–ª–º–∞–¥–∏."}, status=404)
            lang, db_code, exp_at, attempts = row

        elif raw_phone:
            phone = _normalize_phone(raw_phone) if "_normalize_phone" in globals() \
                    else _normalize_phone_fallback(raw_phone)
            cur.execute(
                "SELECT id, COALESCE(lang,'uz'), reset_code, reset_code_expires_at, reset_code_attempts "
                "FROM public.accounts_business WHERE boss_tel_num=%s",
                [phone],
            )
            rows = cur.fetchall()
            if not rows:
                audit_log("fp_verify_fail", request, actor_id=None, status=404,
                          meta={"reason": "user_not_found_by_phone", "phone": phone})
                return JsonResponse({"detail": "–£—à–±—É —Ç–µ–ª–µ—Ñ–æ–Ω –±—û–π–∏—á–∞ “≥–∏—Å–æ–± —Ç–æ–ø–∏–ª–º–∞–¥–∏."}, status=404)
            if len(rows) > 1:
                audit_log("fp_verify_fail", request, actor_id=None, status=409,
                          meta={"reason": "multiple_accounts_for_phone", "phone": phone})
                return JsonResponse({"detail": "–ë—É —Ç–µ–ª–µ—Ñ–æ–Ω–≥–∞ –±–∏—Ä –Ω–µ—á—Ç–∞ “≥–∏—Å–æ–± –±–æ—Ä. –ò–ª—Ç–∏–º–æ—Å ID –∫–∏—Ä–∏—Ç–∏–Ω–≥."}, status=409)
            chat_id, lang, db_code, exp_at, attempts = rows[0]
        else:
            audit_log("fp_verify_fail", request, actor_id=None, status=400,
                      meta={"reason": "id_or_phone_required"})
            return JsonResponse({"detail": "id —ë–∫–∏ boss_tel_num —Ç–∞–ª–∞–± “õ–∏–ª–∏–Ω–∞–¥–∏."}, status=400)

    # --- —Ç–µ–∫—à–∏—Ä–∏—à–ª–∞—Ä
    now = timezone.now()
    if not db_code:
        audit_log("fp_verify_fail", request, actor_id=chat_id, status=400,
                  meta={"reason": "no_code"})
        return JsonResponse({"detail": _code_err(lang, "no_code")}, status=400)

    if exp_at and now > exp_at:
        # ‚úÖ –°–∏–∑ —Å—û—Ä–∞–≥–∞–Ω –∞—É–¥–∏—Ç: expired
        audit_log("fp_verify_fail", request, actor_id=chat_id, status=410,
                  meta={"reason": "expired"})
        return JsonResponse({"detail": _code_err(lang, "expired")}, status=410)

    if attempts is not None and attempts >= MAX_CODE_ATTEMPTS:
        audit_log("fp_verify_fail", request, actor_id=chat_id, status=429,
                  meta={"reason": "too_many"})
        return JsonResponse({"detail": _code_err(lang, "too_many")}, status=429)

    if code != db_code:
        with connection.cursor() as cur:
            cur.execute(
                "UPDATE public.accounts_business "
                "SET reset_code_attempts = COALESCE(reset_code_attempts,0) + 1 "
                "WHERE id=%s",
                [chat_id],
            )
        # ‚úÖ –°–∏–∑ —Å—û—Ä–∞–≥–∞–Ω –∞—É–¥–∏—Ç: wrong_code
        audit_log("fp_verify_fail", request, actor_id=chat_id, status=400,
                  meta={"reason": "wrong_code"})
        return JsonResponse({"detail": _code_err(lang, "wrong")}, status=400)

    # --- –ö–æ–¥ —Ç—û“ì—Ä–∏ ‚Äî –≤–∞“õ—Ç–∏–Ω—á–∞–ª–∏–∫ –ø–∞—Ä–æ–ª —è—Ä–∞—Ç–∏–±, —Ö—ç—à–ª–∞—à –≤–∞ —Å–∞“õ–ª–∞—à
    temp_password = _make_password(chat_id)
    hashed = make_password(temp_password)

    with connection.cursor() as cur:
        cur.execute(
            "UPDATE public.accounts_business "
            "SET password=%s, reset_code=NULL, reset_code_expires_at=NULL, reset_code_attempts=0 "
            "WHERE id=%s",
            [hashed, chat_id],
        )

    # –ë–æ—Ç–≥–∞ –≤–∞“õ—Ç–∏–Ω—á–∞–ª–∏–∫ –ø–∞—Ä–æ–ª–Ω–∏ —é–±–æ—Ä–∏—à
    msg = _forgot_password_text(lang, temp_password)
    sent, meta = _send_tg_message(chat_id, msg)

    # ‚úÖ –°–∏–∑ —Å—û—Ä–∞–≥–∞–Ω –∞—É–¥–∏—Ç: verify_ok
    audit_log("fp_verify_ok", request, actor_id=chat_id, status=200,
              meta={"telegram_sent": bool(sent)})

    # (–∏—Ö—Ç–∏—ë—Ä–∏–π) –∞–≥–∞—Ä —Ç–µ–ª–µ–≥—Ä–∞–º —é–±–æ—Ä–∏—à –æ–º–∞–¥—Å–∏–∑ –±—û–ª—Å–∞, –∏—Å—Ç–∞—Å–∞–∫ –∞–ª–æ“≥–∏–¥–∞ warn –ª–æ–≥ “õ—û–π–∏—à–∏–º–∏–∑ –º—É–º–∫–∏–Ω:
    audit_log("fp_verify_warn", request, actor_id=chat_id, status=200,
              meta={"reason": "telegram_send_failed", "tg_meta": meta})

    resp = {
        "ok": True,
        "id": chat_id,
        "telegram": {"sent": sent},
    }
    if getattr(settings, "DEBUG", False):
        resp["__dev_password_preview"] = temp_password  # —Ñ–∞“õ–∞—Ç DEV–¥–∞
    return JsonResponse(resp, json_dumps_params={"ensure_ascii": False})


# 4 —Ç–∏–ª–ª–∏ —Ö–∞—Ç–ª–∏–∫ —Ö–∞–±–∞—Ä–ª–∞—Ä–∏
_CODE_ERRORS = {
    "no_code": {
        "uz":     "–ö–æ–¥ —Å—û—Ä–∞–ª–º–∞–≥–∞–Ω —ë–∫–∏ –±–µ–∫–æ—Ä “õ–∏–ª–∏–Ω–≥–∞–Ω.",
        "uz_lat": "Kod so'ralmagan yoki bekor qilingan.",
        "ru":     "–ö–æ–¥ –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª—Å—è –∏–ª–∏ –±—ã–ª –æ—Ç–º–µ–Ω—ë–Ω.",
        "en":     "The code was not requested or has been canceled.",
    },
    "expired": {
        "uz":     "–ö–æ–¥ –º—É–¥–¥–∞—Ç–∏ —Ç—É–≥–∞–≥–∞–Ω. –Ø–Ω–∞ –∫–æ–¥ —Å—û—Ä–∞–Ω–≥.",
        "uz_lat": "Kod muddati tugagan. Yana kod so'rang.",
        "ru":     "–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–æ–¥–∞ –∏—Å—Ç—ë–∫. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—ã–π.",
        "en":     "The code has expired. Please request a new one.",
    },
    "too_many": {
        "uz":     "–£—Ä–∏–Ω–∏—à–ª–∞—Ä —Å–æ–Ω–∏ —á–µ–∫–ª–∞–Ω–≥–∞–Ω. –Ø–Ω–∞ –∫–æ–¥ —Å—û—Ä–∞–Ω–≥.",
        "uz_lat": "Urinishlar soni cheklangan. Yana kod so'rang.",
        "ru":     "–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥.",
        "en":     "Too many attempts. Please request a new code.",
    },
    "wrong": {
        "uz":     "–í–∞“õ—Ç–∏–Ω—á–∞–ª–∏–∫ –∫–æ–¥ –Ω–æ—Ç—û“ì—Ä–∏.",
        "uz_lat": "Vaqtinchalik kod noto'g'ri.",
        "ru":     "–í—Ä–µ–º–µ–Ω–Ω—ã–π –∫–æ–¥ –Ω–µ–≤–µ—Ä–Ω—ã–π.",
        "en":     "Incorrect temporary code.",
    },
}

def _code_err(lang: str, key: str) -> str:
    lang = lang if lang in {"uz", "uz_lat", "ru", "en"} else "uz"
    return _CODE_ERRORS[key][lang]


# –ò—Ö—Ç–∏—ë—Ä–∏–π: 4 —Ç–∏–ª–¥–∞ –ë–æ—Å—Å –ª–æ–≥–∏–Ω —Ö–∞–±–∞—Ä–ª–∞—Ä–∏
_AUTH_MSG = {
    "bad_input": {
        "uz":     "ID –≤–∞ –ø–∞—Ä–æ–ª —Ç–∞–ª–∞–± “õ–∏–ª–∏–Ω–∞–¥–∏.",
        "uz_lat": "ID va parol talab qilinadi.",
        "ru":     "–¢—Ä–µ–±—É—é—Ç—Å—è ID –∏ –ø–∞—Ä–æ–ª—å.",
        "en":     "ID and password are required.",
    },
    "invalid": {
        "uz":     "ID —ë–∫–∏ –ø–∞—Ä–æ–ª –Ω–æ—Ç—û“ì—Ä–∏.",
        "uz_lat": "ID yoki parol noto'g'ri.",
        "ru":     "–ù–µ–≤–µ—Ä–Ω—ã–π ID –∏–ª–∏ –ø–∞—Ä–æ–ª—å.",
        "en":     "Invalid ID or password.",
    },
    "ok": {
        "uz":     "–°–∏–∑ —Ç–∏–∑–∏–º–≥–∞ –º—É–≤–∞—Ñ—Ñ–∞“õ–∏—è—Ç–ª–∏ –∫–∏—Ä–¥–∏–Ω–≥–∏–∑.",
        "uz_lat": "Siz tizimga muvaffaqiyatli kirdingiz.",
        "ru":     "–í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏.",
        "en":     "Signed in successfully.",
    }
}

def _t(lang: str, key: str) -> str:
    lang = lang if lang in {"uz","uz_lat","ru","en"} else "uz"
    return _AUTH_MSG[key][lang]


