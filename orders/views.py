# orders/views.py
from django.shortcuts import render
from django.http import JsonResponse, HttpResponseNotAllowed
from django.views.decorators.csrf import csrf_exempt
from django.views.decorators.http import require_GET, require_POST, require_http_methods
from django.db import transaction, connection, IntegrityError, transaction
from django.db.models import F, Sum
from django.db.models.functions import Coalesce
from datetime import date
import json
from datetime import datetime
from django.utils.dateparse import parse_date
from django.utils import timezone
from zoneinfo import ZoneInfo
from accounts.models import Business
from finance.models import Transaction
from .models import Buyurtma
from decimal import Decimal, InvalidOperation
import os, requests, re
import logging


logger = logging.getLogger("orders")

# –ë–æ—Å—Å–Ω–∏ –∞—Å–æ—Å–∏–π –º–µ–Ω—é—Å–∏–¥–∞ —Å—Ç–∞—Ç–∏—Å–∫–∏–∫ –º–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä–Ω–∏ –∫–∞–π—Ç–∞—Ä—É–≤—á–∏ —ç–Ω–¥–ø–æ–µ–Ω—Ç
@require_GET
def main_menu_stats(request):
    try:
        boss_id = int(request.GET.get("boss_id", ""))
    except (TypeError, ValueError):
        return JsonResponse({"detail": "boss_id –Ω–æ—Ç—û“ì—Ä–∏ —ë–∫–∏ –∫–µ–ª–º–∞–¥–∏."}, status=400)

    today = date.today()

    with connection.cursor() as cur:
        # 1) –¢–∏–∑–∏–º “≥–∏—Å–æ–±–∏ (user_boss ‚Üí boss_id)
        cur.execute("""
            SELECT tizimdagi_balance
            FROM public.business_system_account
            WHERE business_id = %s
            ORDER BY id DESC
            LIMIT 1
        """, [boss_id])
        row = cur.fetchone()
        tizim_balans = float(row[0]) if row else 0.0
        
        # 2) –ë—É–≥—É–Ω–≥–∏ –±–∞–∂–∞—Ä–∏–ª–≥–∞–Ω –±—É—é—Ä—Ç–º–∞–ª–∞—Ä (delivered)
        cur.execute("""
            SELECT COUNT(*)
            FROM public.buyurtmalar
            WHERE sana = %s
              AND business_id = %s
              AND buyurtma_statusi = 'delivered'
        """, [today, boss_id])
        bugungi_bajarilgan_soni = cur.fetchone()[0]

        # 3) –ë—É–≥—É–Ω–≥–∏ –±–∞–∂–∞—Ä–∏–ª–º–∞–≥–∞–Ω –±—É—é—Ä—Ç–º–∞–ª–∞—Ä (on_way, accepted)
        cur.execute("""
            SELECT COUNT(*)
            FROM public.buyurtmalar
            WHERE sana = %s
              AND business_id = %s
              AND buyurtma_statusi IN ('on_way','accepted')
        """, [today, boss_id])
        bugungi_bajarilmagan_soni = cur.fetchone()[0]

    return JsonResponse({
        "boss_id": boss_id,
        "business_id": boss_id,
        "tizim_hisobi_balans": tizim_balans,
        "bugungi_bajarilgan_buyurtmalar_soni": bugungi_bajarilgan_soni,
        "bugungi_bajarilmagan_buyurtmalar_soni": bugungi_bajarilmagan_soni,
    })
    
try:
    from zoneinfo import ZoneInfo
    UZ_TZ = ZoneInfo("Asia/Tashkent")
except Exception:
    UZ_TZ = None

def _normalize_phone(raw: str) -> str:
    if not raw:
        return ""
    s = "".join(ch for ch in str(raw) if ch.isdigit() or ch == "+")
    if s and not s.startswith("+") and s.startswith("998"):
        s = "+" + s
    return s

def _default_pay_status() -> str:
    # –ú–æ–¥–µ–ª–¥–∞ ‚Äúpend_pay‚Äù –±–æ—Ä-—ë“õ–ª–∏–≥–∏–Ω–∏ —Ç–µ–∫—à–∏—Ä–∏–±, –±—û–ª–º–∞—Å–∞ 'none' –±–∏–ª–∞–Ω “õ—û—è–º–∏–∑.
    allowed = {c[0] for c in Buyurtma.PAY_STATUS}
    return "pend_pay" if "pend_pay" in allowed else "none"

def _extract_lat_lng(data: dict | str):
    """
    Lat/Lng‚Äô–Ω–∏ —Ç—É—Ä–ª–∏ —Ñ–æ—Ä–º–∞—Ç–¥–∞–Ω —û“õ–∏–± –±–µ—Ä–∞–¥–∏.
    “ö—û–ª–ª–∞–±-quvvatlay–¥–∏:
      1) {"lat": 39.041069, "lng": 65.584425}
      2) {"coords": "39.041069, 65.584425"}  # —ë–∫–∏: "latlng", "location", "point", "geo", "coord"
      3) –ë—É—Ç—É–Ω –±–æ–¥–∏ –±–∏—Ä “õ–∞—Ç–æ—Ä –º–∞—Ç–Ω –±—û–ª—Å–∞: "39.041069, 65.584425"
    “ö–∞–π—Ç–∞—Ä–∞–¥–∏: (lat, lng) | (None, None)
    """
    # 1) –û–¥–¥–∏–π –º–∞–π–¥–æ–Ω–ª–∞—Ä
    if isinstance(data, dict):
        lat = data.get("lat") or data.get("latitude")
        lng = data.get("lng") or data.get("lon") or data.get("long") or data.get("longitude")
        if lat is not None and lng is not None:
            try:
                return float(lat), float(lng)
            except Exception:
                pass

        # 2) –ë–∏—Ä “õ–∞—Ç–æ—Ä–ª–∏ –≤–∞—Ä–∏–∞–Ω—Ç–Ω–∏ –∏–∑–ª–∞—à
        for k in ("coords", "latlng", "location", "point", "geo", "coord"):
            if k in data and data[k]:
                line = str(data[k])
                break
        else:
            line = None
    else:
        # JSON —ç–º–∞—Å, –±—É—Ç—É–Ω –±–æ–¥–∏ ‚Äî –º–∞—Ç–Ω –±—û–ª–≥–∞–Ω “≥–æ–ª–∞—Ç
        line = str(data or "")

    if line:
        # "39.041069, 65.584425" –∫–∞–±–∏: –ª–∞—Ç, –ª–æ–Ω–≥ (“õ–∞–≤—Å/–±—û—à–ª–∏“õ/“õ—û—à–∏–º—á–∞ –±–µ–ª–≥–∏–ª–∞—Ä–≥–∞ —á–∏–¥–∞–º–ª–∏)
        m = re.search(r'(-?\d+(?:\.\d+)?)\s*[,;]\s*(-?\d+(?:\.\d+)?)', line)
        if m:
            lat_s, lng_s = m.group(1), m.group(2)
            try:
                return float(lat_s), float(lng_s)
            except Exception:
                pass

    return None, None

# --- üÜï ORDER NUMBER GENERATOR ---
def _format_segment(n: int, min_width: int = 2) -> str:
    """
    –°–µ–≥–º–µ–Ω—Ç–Ω–∏ –∫–∞–º–∏–¥–∞ 2 —Ä–∞–∑—Ä—è–¥–≥–∞—á–∞ 0 –±–∏–ª–∞–Ω —Ç—û–ª–¥–∏—Ä–∏–± –±–µ—Ä–∞–¥–∏.
    –ê–≥–∞—Ä —Å–æ–Ω 2 —Ä–∞–∑—Ä—è–¥–¥–∞–Ω –∫–∞—Ç—Ç–∞ –±—û–ª—Å–∞, —û–∑ “≥–æ–ª–∏—á–∞ “õ–æ–ª–∞–¥–∏ (–º–∞—Å–∞–ª–∞–Ω: 128 ‚Üí "128").
    """
    s = str(int(n))
    result = s.zfill(min_width) if len(s) < min_width else s
    #print(f"–ò–∫–∫–∏ —Ä–∞–∑—Ä—è–¥–ª–∏ —Å–∏–≥–º–µ–Ω—Ç {result}")
    return result


def _next_order_num(suv_soni: int) -> str:
    """
    –ô–∏–ª/–æ–π/–∫—É–Ω –∫–µ—Å–∏–º–∏–¥–∞–≥–∏ –ñ–ê–ú–ò –°–£–í (–±—É—Ç–∏–ª–∫–∞) —Å–æ–Ω–∏–Ω–∏ “≥–∏—Å–æ–±–ª–∞–π–¥–∏.
    –û–ª–¥–∏–Ω–≥–∏ buyurtmalar'd–∞–≥–∏ suv_soni —Å—É–º–º–∞—Å–∏–Ω–∏ –æ–ª–∞–¥–∏ –≤–∞
    –∂–æ—Ä–∏–π suv_soni'–Ω–∏ “õ—û—à–∏–± —Å–µ–≥–º–µ–Ω—Ç–ª–∞—Ä–Ω–∏ –±–µ—Ä–∞–¥–∏.
    –ë–∞–∑–∞ –º—É—Ç–ª–∞“õ–æ –±—û—à –±—û–ª—Å–∞ ‚Äî "01-01-01".
    """
    suv_soni = int(suv_soni or 0)
    if suv_soni <= 0:
        suv_soni = 1  # —Ö–∞–≤—Ñ—Å–∏–∑–ª–∏–∫ —É—á—É–Ω

    now_uz = timezone.localtime(timezone.now())
    today   = now_uz.date()
    y_start = today.replace(month=1, day=1)
    m_start = today.replace(day=1)

    with transaction.atomic():
        # –ë–∏—Ä –≤–∞“õ—Ç–¥–∞ —Ñ–∞“õ–∞—Ç –±–∏—Ç—Ç–∞ –≤–æ—Ä–∫–µ—Ä —Å–∞–Ω–∞—à–∏ —É—á—É–Ω advisory lock
        with connection.cursor() as cur:
            cur.execute("SELECT pg_advisory_xact_lock(hashtext(%s))", ["buyurtma_order_num"])

        # –ë–∞–∑–∞ –º—É—Ç–ª–∞“õ–æ –±—û—à–º–∏?
        total_all = Buyurtma.objects.only("id").count()
        if total_all == 0:
            return "01-01-01"

        # üî¢ –û–ª–¥–∏–Ω–≥–∏ –±—É—Ç–∏–ª–∫–∞ –∂–∞–º–∏ (order —ç–º–∞—Å, aynan suv_soni —Å—É–º–º–∞—Å–∏)
        y_sum = Buyurtma.objects.filter(sana__gte=y_start, sana__lte=today)\
                 .aggregate(total=Coalesce(Sum("suv_soni"), 0))["total"]
        m_sum = Buyurtma.objects.filter(sana__gte=m_start, sana__lte=today)\
                 .aggregate(total=Coalesce(Sum("suv_soni"), 0))["total"]
        d_sum = Buyurtma.objects.filter(sana=today)\
                 .aggregate(total=Coalesce(Sum("suv_soni"), 0))["total"]

        # –ñ–æ—Ä–∏–π buyurtma –±—É—Ç–∏–ª–∫–∞–ª–∞—Ä–∏–Ω–∏ “õ—û—à–∞–º–∏–∑
        y_count = int(y_sum) + suv_soni
        m_count = int(m_sum) + suv_soni
        d_count = int(d_sum) + suv_soni

        # –§–æ—Ä–º–∞—Ç: –∫–∞–º–∏–¥–∞ 2 —Ä–∞–∑—Ä—è–¥ (–º–∞—Å–∞–ª–∞–Ω 03-03-03)
        return f"{_format_segment(y_count, 2)}-{_format_segment(m_count, 2)}-{_format_segment(d_count, 2)}"
    
    
# ------------------------------
# –ë–∏–∑–Ω–µ—Å—Å “≥—É–¥—É–¥–Ω–∏ —Ç–µ–∫—à–∏—Ä–∏—à (PostGIS)
# ------------------------------
def _within_business_area(business_id: int, lat: float, lng: float) -> bool:
    # Business‚Äôdan viloyat‚Äô–Ω–∏ –æ–ª–∞–º–∏–∑
    viloyat = Business.objects.filter(id=business_id).values_list("viloyat", flat=True).first()
    if not viloyat:
        print(f"[AREA] business_id={business_id} uchun viloyat topilmadi")
        return False

    # 1) –≠–Ω–≥ —è“õ–∏–Ω –º–∞—Ä–∫–∞–∑–≥–∞—á–∞ –º–∞—Å–æ—Ñ–∞–Ω–∏ “≥–∏—Å–æ–±–ª–∞—à (–º–µ—Ç—Ä–¥–∞), –∫–µ–π–∏–Ω –∫–º–≥–∞ –∞–π–ª–∞–Ω—Ç–∏—Ä–∞–º–∏–∑
    sql = """
    SELECT
      g.shaxar_yoki_tuman_nomi,
      g.radius_km,
      ST_Distance(
        g.center_geog,
        ST_SetSRID(ST_MakePoint(%s, %s), 4326)::geography
      ) AS dist_m
    FROM public.geo_list g
    WHERE g.viloyat = %s
    ORDER BY dist_m ASC
    LIMIT 1;
    """

    with connection.cursor() as cur:
        # Eslatma: MakePoint(lng, lat)
        cur.execute(sql, [float(lng), float(lat), viloyat])
        row = cur.fetchone()

    if not row:
        print(f"[AREA] viloyat='{viloyat}' uchun geo_list topilmadi")
        return False

    name, radius_km, dist_m = row
    dist_km = float(dist_m) / 1000.0
    radius_km = float(radius_km or 0)
    ok = dist_km <= radius_km

    # üîé –ö–æ–Ω—Å–æ–ª–≥–∞ –¥–µ–±–∞–≥ —á–∏“õ–∏—à–∏:
    print(
        f"[AREA] biz_id={business_id} viloyat={viloyat} "
        f"target=({lat:.6f},{lng:.6f}) nearest='{name}' "
        f"dist_km={dist_km:.3f} radius_km={radius_km:.0f} => ok={ok}"
    )

    return ok

# ------------------------------
# –ë–∏–∑–Ω–µ—Å—Å ID –±—û–π–∏—á–∞ –π–∏–ª –≤–∞ –æ–π –±–æ—à–∏–¥–∞–Ω –±—É—é—Ä—Ç–º–∞ —Å–æ–Ω–∏–Ω–∏ —Å–∞–Ω–∞—à
# ------------------------------
def _inc_month_year_counters(business_id: int, suv_soni: int) -> int:
    """
    public.accounts_business.oy_bosh_sotil_suv_soni –≤–∞
    public.accounts_business.yil_bosh_sotil_suv_soni –Ω–∏ –∞—Ç–æ–º–∞—Ä —Ä–∞–≤–∏—à–¥–∞ oshiradi.
    NULL -> 0 “≥–∏—Å–æ–±–ª–∞–Ω–∞–¥–∏, keyin + suv_soni “õ–∏–ª–∞–¥–∏.
    “ö–∞–π—Ç–∞—Ä–∏–ª–∞–¥–∏: update “õ–∏–ª–∏–Ω–≥–∞–Ω “õ–∞—Ç–æ—Ä–ª–∞—Ä —Å–æ–Ω–∏ (0 —ë–∫–∏ 1).
    """
    suv_soni = int(suv_soni or 0)
    if suv_soni <= 0:
        return 0
    return Business.objects.filter(id=business_id).update(
        oy_bosh_sotil_suv_soni = Coalesce(F("oy_bosh_sotil_suv_soni"), 0) + suv_soni,
        yil_bosh_sotil_suv_soni = Coalesce(F("yil_bosh_sotil_suv_soni"), 0) + suv_soni,
    )

# ------------------------------
# –ë—É—é—Ä—Ç–º–∞–¥–∞ —Å—É–º–º–∞ {ammount}–Ω–∏ –∞–Ω–∏–∫–ª–∞—à
# ------------------------------
def _calc_amount_for_order(business_id: int, suv_soni: int) -> tuple[Decimal, str, int, int]:
    """
    business_id –≤–∞ suv_soni –±—û–π–∏—á–∞ —Å—É–º–º–∞ (amount)–Ω–∏ “≥–∏—Å–æ–±–ª–∞–π–¥–∏.
    –ö–∞–π—Ç–∞—Ä–∏–ª–∞–¥–∏: (amount, period, counter_value, unit_price)

    period: 'monthly' | 'yearly'
    counter_value: narx tanlash–¥–∞ –∏—à–ª–∞—Ç–∏–ª–≥–∞–Ω “≥–∏—Å–æ–±–ª–∞–≥–∏—á “õ–∏–π–º–∞—Ç–∏ (–æ–π/–π–∏–ª –±–æ—à–∏–¥–∞–Ω)
    unit_price: —Ç–∞–Ω–ª–∞–Ω–≥–∞–Ω –¥–∏–∞–ø–∞–∑–æ–Ω –±—û–π–∏—á–∞ 1 —Å—É–≤ –Ω–∞—Ä—Ö–∏
    """
    suv_soni = int(suv_soni or 0)
    if suv_soni <= 0:
        raise ValueError("suv_soni > 0 –±—û–ª–∏—à–∏ –∫–µ—Ä–∞–∫")

    # üîí –±–∏–∑–Ω–µ—Å “õ–∞—Ç–æ—Ä–∏–Ω–∏ “õ—É–ª—Ñ–ª–∞–± —û“õ–∏–º–æ“õ–¥–∞–º–∏–∑ (–∞—Ç–æ–º–∞—Ä “≥–∏—Å–æ–±)
    biz = (
        Business.objects
        .select_for_update()
        .only("narxlar_diap_davri", "oy_bosh_sotil_suv_soni", "yil_bosh_sotil_suv_soni", "service_price_rules")
        .get(id=business_id)
    )

    period = (biz.narxlar_diap_davri or "").strip().lower()
    if period not in {"monthly", "yearly"}:
        # –∫–æ–Ω—Ñ–∏–≥ –π—û“õ/–Ω–æ—Ç—û“ì—Ä–∏ –±—û–ª—Å–∞ ‚Äî 0 —Å—û–º
        return Decimal("0"), period or "monthly", 0, 0

    counter_value = int(biz.oy_bosh_sotil_suv_soni or 0) if period == "monthly" \
                    else int(biz.yil_bosh_sotil_suv_soni or 0)

    # JSONB -> Python list[dict]
    rules = biz.service_price_rules or []
    # —Ö–∞–≤—Ñ—Å–∏–∑–ª–∏–∫: start –±—û–π–∏—á–∞ —Å–æ—Ä—Ç–ª–∞–π–º–∏–∑
    try:
        rules = sorted(rules, key=lambda r: int(r.get("start", 0)))
    except Exception:
        rules = []

    unit_price = 0
    for r in rules:
        try:
            start = int(r.get("start", 0))
            end_raw = r.get("end", None)
            end = None if end_raw is None else int(end_raw)
            price = int(r.get("price", 0))
        except Exception:
            continue

        if counter_value >= start and (end is None or counter_value <= end):
            unit_price = price
            break

    # –∞–≥–∞—Ä “≥–µ—á –±–∏—Ä–∏ —Ç—û“ì—Ä–∏ –∫–µ–ª–º–∞—Å–∞, –æ—Ö–∏—Ä–≥–∏ “õ–æ–∏–¥–∞ end=null –±—û–ª—Å–∞ —à—É–Ω–∏, –∞–∫—Å “≥–æ–ª–¥–∞ 0 –æ–ª–∞–º–∏–∑
    if unit_price == 0 and rules:
        last = rules[-1]
        if last.get("end") is None:
            try:
                unit_price = int(last.get("price", 0))
            except Exception:
                unit_price = 0

    amount = Decimal(str(unit_price)) * Decimal(str(suv_soni))
    return amount, period, counter_value, unit_price


# ------------------------------
# –ë—É—é—Ä—Ç–º–∞ —è—Ä–∞—Ç–∏—à
# ------------------------------
@csrf_exempt
@require_POST
def create_buyurtma(request):
    # 1) Payload
    if request.content_type and "application/json" in request.content_type.lower():
        data = json.loads((request.body or b"").decode("utf-8") or "{}")
    else:
        data = request.POST.dict()

    # 2) –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è —Ö–∞–±–∞—Ä–ª–∞—Ä–∏ –≤–∞ —Ç–∏–ª
    _msg = {
        "out_of_area": {
            "uz":     "–Æ–±–æ—Ä–∏–ª–≥–∞–Ω –ª–æ–∫–∞—Ü–∏—è —Ñ–∞–æ–ª–∏—è—Ç —é—Ä–∏—Ç–∏—à “≥—É–¥—É–¥–∏–¥–∞–Ω —Ç–∞—à“õ–∞—Ä–∏–¥–∞. –õ–æ–∫–∞—Ü–∏—è –Ω–æ—Ç—û“ì—Ä–∏.",
            "uz_lat": "Yuborilgan lokatsiya faoliyat yuritish hududidan tashqarida. Lokatsiya noto‚Äòg‚Äòri.",
            "ru":     "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –ª–æ–∫–∞—Ü–∏—è –≤–Ω–µ –∑–æ–Ω—ã –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏. –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –ª–æ–∫–∞—Ü–∏—è.",
            "en":     "The sent location is outside the service area. Invalid location.",
        },
        "check_failed": {
            "uz":     "–õ–æ–∫–∞—Ü–∏—è–Ω–∏ —Ç–µ–∫—à–∏—Ä–∏—à–¥–∞ –Ω–æ—Å–æ–∑–ª–∏–∫. –ö–µ–π–∏–Ω—Ä–æ“õ —è–Ω–∞ —É—Ä–∏–Ω–∏–± –∫—û—Ä–∏–Ω–≥.",
            "uz_lat": "Lokatsiyani tekshirishda nosozlik. Keyinroq yana urinib ko‚Äòring.",
            "ru":     "–°–±–æ–π –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ª–æ–∫–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            "en":     "Failed to verify location. Please try again later.",
        },
    }
    lang = (str(data.get("lang") or "—É–∑")).lower()
    if lang not in {"uz", "uz_lat", "ru", "en"}:
        lang = "uz"

    # 3) –ú–∞–∂–±—É—Ä–∏–π –º–∞–π–¥–æ–Ω–ª–∞—Ä
    try:
        business_id = int(data.get("business_id") or 0)
    except ValueError:
        business_id = 0
    client_tg_id = data.get("client_tg_id")
    client_tel_num = _normalize_phone(data.get("client_tel_num", ""))

    try:
        suv_soni = int(data.get("suv_soni") or 0)
    except ValueError:
        suv_soni = 0

    # 4) –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ –ø–∞—Ä—Å
    lat_in, lng_in = _extract_lat_lng(data)    
    try:
        lat_f = float(lat_in); lng_f = float(lng_in)
    except (TypeError, ValueError):
        return JsonResponse({"detail": "lat/lng —Ñ–æ—Ä–º–∞—Ç –Ω–æ—Ç—û“ì—Ä–∏."}, status=400)
  
    # 5) –ê—Å–æ—Å–∏–π –≤–∞–ª–∏–¥–∞—Ü–∏—è–ª–∞—Ä
    if not business_id:
        return JsonResponse({"detail": "business_id —Ç–∞–ª–∞–± “õ–∏–ª–∏–Ω–∞–¥–∏."}, status=400)
    if not client_tel_num:
        return JsonResponse({"detail": "–ë—É—é—Ä—Ç–º–∞—á–∏ —Ç–µ–ª–µ—Ñ–æ–Ω —Ä–∞“õ–∞–º–∏ —Ç–∞–ª–∞–± “õ–∏–ª–∏–Ω–∞–¥–∏."}, status=400)
    if suv_soni <= 0:
        return JsonResponse({"detail": "–°—É–≤ —Å–æ–Ω–∏ 1 –¥–∞–Ω –∫–∞—Ç—Ç–∞ –±—û–ª—Å–∏–Ω."}, status=400)
    if lat_in is None or lng_in is None:
        return JsonResponse({"detail": "lat/lng –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–ª–∞—Ä–∏ —Ç–∞–ª–∞–± “õ–∏–ª–∏–Ω–∞–¥–∏."}, status=400)

    # 6) –•–∏–∑–º–∞—Ç “≥—É–¥—É–¥–∏ —Ç–µ–∫—à–∏—Ä—É–≤–∏ (–±–∏—Ä –º–∞—Ä—Ç–∞)
    try:
        ok = _within_business_area(business_id, lat_f, lng_f)
    except Exception:
        return JsonResponse({"detail": _msg["check_failed"][lang]}, status=500)
    if not ok:
        return JsonResponse({"detail": _msg["out_of_area"][lang]}, status=400)

    # 7) –î–∏–∞–ø–∞–∑–æ–Ω –≤–∞ Decimal –≥–∞ –∫–æ–Ω–≤–µ—Ä—Ç (—Å–∞“õ–ª–∞—à —É—á—É–Ω)
    try:
        lat = Decimal(str(lat_f)); lng = Decimal(str(lng_f))
    except InvalidOperation:
        return JsonResponse({"detail": "lat/lng —Ñ–æ—Ä–º–∞—Ç –Ω–æ—Ç—û“ì—Ä–∏."}, status=400)
    if not (-90 <= lat <= 90 and -180 <= lng <= 180):
        return JsonResponse({"detail": "lat/lng –∫–æ—Ä–¥–∏–Ω–∞—Ç–∞–ª–∞—Ä –¥–∏–∞–ø–∞–∑–æ–Ω–∏ –Ω–æ—Ç—û“ì—Ä–∏."}, status=400)

    if not Business.objects.filter(id=business_id).exists():
        return JsonResponse({"detail": "–ë—É–Ω–¥–∞–π business_id –º–∞–≤–∂—É–¥ —ç–º–∞—Å."}, status=404)

    # 8) “ö–æ–ª–≥–∞–Ω –º–∞–π–¥–æ–Ω–ª–∞—Ä
    acc = data.get("location_accuracy")
    src = (data.get("location_source") or "manual").lower()
    manzil = (data.get("manzil") or "").strip()    
        # üÜï Izoh (several possible keys: "manzil_izoh" or "izoh")
    manzil_izoh = (data.get("manzil_izoh") or data.get("izoh") or "")
    manzil_izoh = manzil_izoh.strip() or None

    now_uz = timezone.localtime(timezone.now())
    
    attempt = 0
    last_err = None
    while attempt < 5:
        attempt += 1
        order_num = _next_order_num(suv_soni)
        print(f"–û—Ä–¥–µ—Ä —Ä–∞“õ–∞–º–∏ {order_num}")
        try:
            with transaction.atomic():
                # üÜï 1) (ammount) –ë—É—é—Ä—Ç–º–∞ —Å—É–º–º–∞—Å–∏–Ω–∏ “≥–∏—Å–æ–±–ª–∞—à
                amount, period, used_counter, unit_price = _calc_amount_for_order(business_id, suv_soni)
                obj = Buyurtma.objects.create(
                    business_id=business_id,
                    sana=now_uz.date(),
                    vaqt=now_uz.time().replace(microsecond=0),
                    client_tg_id=(int(client_tg_id) if str(client_tg_id).isdigit() else None),
                    client_tel_num=client_tel_num,
                    suv_soni=suv_soni,
                    manzil=manzil,
                    manzil_izoh=manzil_izoh,
                    buyurtma_statusi="pending",
                    pay_status=_default_pay_status(),
                    lat=lat,
                    lng=lng,
                    location_accuracy=(int(acc) if acc else None),
                    location_source=src if src in {"tg", "manual", "geocode"} else "manual",
                    order_num=order_num,  # üÜï
                    amount=amount, # –ë—É—é—Ä—Ç–º–∞ —Å—É–º–º–∞—Å–∏
                )
                
                 # üÜï –û–π/–ô–∏–ª –±–æ—à–∏–¥–∞–Ω —Å–æ—Ç–∏–ª–≥–∞–Ω —Å—É–≤ —Å–æ–Ω–∏–Ω–∏ increment “õ–∏–ª–∞–º–∏–∑ (–ê–≤—Ç–æ–º–∞—Ä)
                updated = _inc_month_year_counters(business_id, suv_soni)
                if updated == 0:
                    logger.warning("Business %s topilmadi, counters yangilanmadi", business_id)
                    
                logger.info("Price calc: period=%s, counter=%s -> unit=%s, amount=%s",
                            period, used_counter, unit_price, str(amount))
                
            break  # –º—É–≤–∞—Ñ—Ñ–∞“õ–∏—è—Ç–ª–∏ —è—Ä–∞—Ç–∏–ª–¥–∏
        except IntegrityError as e:
            # –ú–∞—Å–∞–ª–∞–Ω, order_num unique –±—É–∑–∏–ª—Å–∞ ‚Äî —è–Ω–∞ –±–∏—Ä –º–∞—Ä—Ç–∞ —É—Ä–∏–Ω–∞–º–∏–∑
            last_err = e
            continue
    #print("attempt —Å–∏–≥–º–µ–Ω—Ç–∏–¥–∞ “õ—û—à–∏–ª–≥–∞–Ω —Ä–∞–∑—Ä—è–¥ —Å–æ–Ω–∏-", attempt, "—Ç–∞")        
    if attempt >= 5 and last_err:
        return JsonResponse(
            {"detail": "–ò—á–∫–∏ —Ä–∞“õ–∞–º–Ω–∏ —è—Ä–∞—Ç–∏—à–¥–∞ –º—É–∞–º–º–æ. –ò–ª—Ç–∏–º–æ—Å, —è–Ω–∞ —É—Ä–∏–Ω–∏–± –∫—û—Ä–∏–Ω–≥."},
            status=500
        )
        
    return JsonResponse({
        "message": "–ë—É—é—Ä—Ç–º–∞ –º—É–≤–∞—Ñ—Ñ–∞“õ–∏—è—Ç–ª–∏ —è—Ä–∞—Ç–∏–ª–¥–∏.",
        "buyurtma_id": obj.id,
        "order_num": obj.order_num,  # üÜï –∫–ª–∏–µ–Ω—Ç–≥–∞ “≥–∞–º –±–µ—Ä–∞–º–∏–∑
        "status": obj.buyurtma_statusi,
        "pay_status": obj.pay_status,
        "sana": str(obj.sana),
        "vaqt": str(obj.vaqt),
        "manzil": obj.manzil,
        "suv_soni": suv_soni,
        "suv_narxi": unit_price,
        "tulov_summasi":amount,
        "coords": {
            "lat": float(obj.lat),
            "lng": float(obj.lng),
            "source": obj.location_source,
            "accuracy": obj.location_accuracy,             
        }
    }, status=201)
    
# ------------------------------
# –ë–∞–∂–∞—Ä–∏–ª–º–∞–≥–∞–Ω –±—É—é—Ä—Ç–º–∞–ª–∞—Ä–Ω–∏ —Ä—û–π—Ö–∞—Ç–∏–Ω–∏ “õ–∞–π—Ç–∞—Ä–∏—à —É—á—É–Ω —ë—Ä–¥–∞–º—á–∏ —Ñ—É–Ω–∫—Ü–∏—è
# ------------------------------    
def _human_pay_status(code: str) -> str:
    return "–û–Ω–ª–∞–π–Ω —Ç—û–ª–∞–Ω–¥–∏" if (code or "").lower() == "completed_online" else "–¢—û–ª–∞–Ω–º–∞–≥–∞–Ω"

# ------------------------------
# –ë–∞–∂–∞—Ä–∏–ª–º–∞–≥–∞–Ω –±—É—é—Ä—Ç–º–∞–ª–∞—Ä–Ω–∏ —Ä—û–π—Ö–∞—Ç–∏–Ω–∏ “õ–∞–π—Ç–∞—Ä–∏—à —É—á—É–Ω —ë—Ä–¥–∞–º—á–∏ —Ñ—É–Ω–∫—Ü–∏—è
# ------------------------------   
def _point_wkt(lat, lng):
    try:
        return f"POINT ({float(lng)} {float(lat)})"
    except Exception:
        return None

# ------------------------------
# –ë–∞–∂–∞—Ä–∏–ª–º–∞–≥–∞–Ω –±—É—é—Ä—Ç–º–∞–ª–∞—Ä–Ω–∏ —Ä—û–π—Ö–∞—Ç–∏–Ω–∏ “õ–∞–π—Ç–∞—Ä–∏—à —É—á—É–Ω –æ–Ω–ª–∞–π–Ω —Ç—É–ª–æ–≤–ª–∞—Ä –º–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä–∏–Ω–∏ –∫–∞–π—Ç–∞—Ä—É–≤—á–∏ —ë—Ä–¥–∞–º—á–∏ —Ñ—É–Ω–∫—Ü–∏—è
# ------------------------------ 
def _human_pay_status(code: str) -> str:
    return "–û–Ω–ª–∞–π–Ω —Ç—û–ª–∞–Ω–¥–∏" if (code or "").lower() == "completed_online" else "–¢—û–ª–∞–Ω–º–∞–≥–∞–Ω"

# ------------------------------
# –ë–∞–∂–∞—Ä–∏–ª–º–∞–≥–∞–Ω –±—É—é—Ä—Ç–º–∞–ª–∞—Ä–Ω–∏ —Ä—û–π—Ö–∞—Ç–∏–Ω–∏ “õ–∞–π—Ç–∞—Ä–∏—à —É—á—É–Ω –æ–Ω–ª–∞–π–Ω —Ç—É–ª–æ–≤–ª–∞—Ä —Å–∞–Ω–∞–ª–∞—Ä–∏–Ω–∏ —Ñ–æ—Ä–º–∞—Ç–ª–æ–≤—á–∏ —ë—Ä–¥–∞–º—á–∏ —Ñ—É–Ω–∫—Ü–∏—è
# ------------------------------ 
def _fmt_dt(dt):
    """ updated_at –Ω–∏ —Å–∞–Ω–∞/–≤–∞“õ—Ç–≥–∞ —Ñ–æ—Ä–º–∞—Ç–ª–∞–π–º–∏–∑ (UZ local time). """
    if not dt:
        return "", ""
    dt = timezone.localtime(dt)
    return dt.strftime("%d.%m.%y"), dt.strftime("%H:%M")


# ------------------------------
# –ë–∞–∂–∞—Ä–∏–ª–º–∞–≥–∞–Ω –±—É—é—Ä—Ç–º–∞–ª–∞—Ä–Ω–∏ —Ä—û–π—Ö–∞—Ç–∏–Ω–∏ “õ–∞–π—Ç–∞—Ä—É–≤—á–∏ —Ñ—É–Ω–∫—Ü–∏—è
# ------------------------------   
@csrf_exempt
@require_http_methods(["GET", "POST"])
def list_pending_orders(request):
    """
    –ö–∏—Ä–∏—à: business_id (GET query —ë–∫–∏ POST JSON)
    –ß–∏“õ–∏—à: —Å–∫—Ä–∏–Ω–¥–∞–≥–∏ –∂–∞–¥–≤–∞–ª —É—á—É–Ω —Ä—É–π—Ö–∞—Ç
    """
    # 1) business_id –æ–ª–∞–º–∏–∑ (GET —ë–∫–∏ JSON)
    if request.method == "GET":
        business_id = request.GET.get("business_id")
    else:
        try:
            import json
            payload = json.loads((request.body or b"").decode("utf-8") or "{}")
        except Exception:
            payload = {}
        business_id = payload.get("business_id")
    print(f"business_id= {business_id}")
    try:
        business_id = int(business_id)
    except (TypeError, ValueError):
        return JsonResponse({"detail": "business_id —Ç–∞–ª–∞–± “õ–∏–ª–∏–Ω–∞–¥–∏ (integer)."}, status=400)

    # 2) pending –±—É—é—Ä—Ç–º–∞–ª–∞—Ä–Ω–∏ –æ–ª–∞–º–∏–∑ (–æ—Ö–∏—Ä–≥–∏–ª–∞—Ä–∏ –∞–≤–≤–∞–ª)
    qs = (Buyurtma.objects
          .filter(business_id=business_id, buyurtma_statusi="pending")
          .order_by("-sana", "-vaqt"))

    rows = []
    total_suv_soni = 0

    for o in qs:
        buyurtma_sanasi = o.sana.strftime("%d.%m.%y") if o.sana else ""
        buyurtma_vaqti  = o.vaqt.strftime("%H:%M")   if o.vaqt else ""
        
        # üîπ –¢—É–ª—É–≤ —Å—Ç–∞—Ç—É—Å–∏ (–æ–Ω–ª–∞–π–Ω —ë–∫–∏ –π—û“õ)
        human_status = _human_pay_status(o.pay_status)

        # üîπ –ê–≥–∞—Ä –æ–Ω–ª–∞–π–Ω —Ç—û–ª–æ–≤ –±—û–ª—Å–∞, transactions‚Äô–¥–∞–Ω —Ç—û–ª–æ–≤–ª–∞—Ä —Ä—û–π—Ö–∞—Ç–∏–Ω–∏ –æ–ª–∞–º–∏–∑
        payments = []
        if human_status == "–û–Ω–ª–∞–π–Ω —Ç—û–ª–∞–Ω–¥–∏":
            # order_num = transactions.order_id –±–∏–ª–∞–Ω –±–æ“ì–ª–∞–Ω—è–ø—Ç–∏
            tx_qs = (Transaction.objects
                     .filter(order_id=o.order_num)
                     .order_by("-updated_at")
                     .values("updated_at", "amount", "order_id"))

            for tx in tx_qs:
                p_date, p_time = _fmt_dt(tx["updated_at"])
                payments.append({
                    "pay_date": p_date,                   # –¥–¥.–º–º.–≥–≥
                    "pay_time": p_time,                   # —á—á.–º–º
                    "amount":   str(tx["amount"]),        # decimal -> str
                    "order_id": tx["order_id"],
                })

        rows.append({
            "buyurtma_sanasi":   buyurtma_sanasi,                  # –¥–¥.–º–º.–≥–≥
            "buyurtma_vaqti":    buyurtma_vaqti,                   # —á—á.–º–º
            "izoh":              (o.manzil_izoh or ""),            # –º–∞–Ω–∑–∏–ª –∏–∑–æ“≥
            "buyurtmachi_id":    o.client_tg_id,                   # telegram id
            "buyurtma_id_raqami": o.order_num,                     # –∏—á–∫–∏–π —Ä–∞“õ–∞–º
            "suv_soni":          int(o.suv_soni or 0),
            "location":          _point_wkt(o.lat, o.lng),         # "POINT (lng lat)"
            "tulov_statusi":     _human_pay_status(o.pay_status),  # –û–Ω–ª–∞–π–Ω —Ç—û–ª–∞–Ω–¥–∏ / –¢—û–ª–∞–Ω–º–∞–≥–∞–Ω
            # üÜï –û–Ω–ª–∞–π–Ω –±—û–ª—Å–∞ ‚Äî “≥–∞—Ä –±–∏—Ä —Ç—û–ª–æ–≤ –∞–ª–æ“≥–∏–¥–∞ –æ–±—ä–µ–∫—Ç —Å–∏—Ñ–∞—Ç–∏–¥–∞
            "online_payments":    payments,                   # [] —ë–∫–∏ [{pay_date,...}, ...]
        })
        total_suv_soni += int(o.suv_soni or 0)

    return JsonResponse({
        "business_id": business_id,
        "count": len(rows),
        "suv_soni_jami": total_suv_soni,
        "items": rows,
    }, status=200)
    
