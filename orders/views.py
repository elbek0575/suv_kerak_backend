# orders/views.py
from django.shortcuts import render
from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt
from django.views.decorators.http import require_GET, require_POST
from django.db import transaction, connection, IntegrityError
from django.db.models import F
from django.db.models.functions import Coalesce
from datetime import date
import json
from datetime import datetime
from django.utils import timezone
from zoneinfo import ZoneInfo
from accounts.models import Business
from .models import Buyurtma
from decimal import Decimal, InvalidOperation
import os, requests
import re
import logging


logger = logging.getLogger("orders")

# –ë–æ—Å—Å–Ω–∏ –∞—Å–æ—Å–∏–π –º–µ–Ω—é—Å–∏–¥–∞ —Å—Ç–∞—Ç–∏—Å–∫–∏–∫ –º–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä–Ω–∏ –∫–∞–π—Ç–∞—Ä—É–≤—á–∏ —ç–Ω–¥–ø–æ–µ–Ω—Ç
@require_GET
def main_menu_stats(request):
    try:
        boss_id = int(request.GET.get("boss_id", ""))
    except (TypeError, ValueError):
        return JsonResponse({"detail": "boss_id –Ω–æ—Ç—û“ì—Ä–∏ —ë–∫–∏ –∫–µ–ª–º–∞–¥–∏."}, status=400)

    today = date.today()

    with connection.cursor() as cur:
        # 1) –¢–∏–∑–∏–º “≥–∏—Å–æ–±–∏ (user_boss ‚Üí boss_id)
        cur.execute("""
            SELECT tizimdagi_balance
            FROM public.business_system_account
            WHERE business_id = %s
            ORDER BY id DESC
            LIMIT 1
        """, [boss_id])
        row = cur.fetchone()
        tizim_balans = float(row[0]) if row else 0.0
        
        # 2) –ë—É–≥—É–Ω–≥–∏ –±–∞–∂–∞—Ä–∏–ª–≥–∞–Ω –±—É—é—Ä—Ç–º–∞–ª–∞—Ä (delivered)
        cur.execute("""
            SELECT COUNT(*)
            FROM public.buyurtmalar
            WHERE sana = %s
              AND business_id = %s
              AND buyurtma_statusi = 'delivered'
        """, [today, boss_id])
        bugungi_bajarilgan_soni = cur.fetchone()[0]

        # 3) –ë—É–≥—É–Ω–≥–∏ –±–∞–∂–∞—Ä–∏–ª–º–∞–≥–∞–Ω –±—É—é—Ä—Ç–º–∞–ª–∞—Ä (on_way, accepted)
        cur.execute("""
            SELECT COUNT(*)
            FROM public.buyurtmalar
            WHERE sana = %s
              AND business_id = %s
              AND buyurtma_statusi IN ('on_way','accepted')
        """, [today, boss_id])
        bugungi_bajarilmagan_soni = cur.fetchone()[0]

    return JsonResponse({
        "boss_id": boss_id,
        "business_id": boss_id,
        "tizim_hisobi_balans": tizim_balans,
        "bugungi_bajarilgan_buyurtmalar_soni": bugungi_bajarilgan_soni,
        "bugungi_bajarilmagan_buyurtmalar_soni": bugungi_bajarilmagan_soni,
    })
    
try:
    from zoneinfo import ZoneInfo
    UZ_TZ = ZoneInfo("Asia/Tashkent")
except Exception:
    UZ_TZ = None

def _normalize_phone(raw: str) -> str:
    if not raw:
        return ""
    s = "".join(ch for ch in str(raw) if ch.isdigit() or ch == "+")
    if s and not s.startswith("+") and s.startswith("998"):
        s = "+" + s
    return s

def _default_pay_status() -> str:
    # –ú–æ–¥–µ–ª–¥–∞ ‚Äúpend_pay‚Äù –±–æ—Ä-—ë“õ–ª–∏–≥–∏–Ω–∏ —Ç–µ–∫—à–∏—Ä–∏–±, –±—û–ª–º–∞—Å–∞ 'none' –±–∏–ª–∞–Ω “õ—û—è–º–∏–∑.
    allowed = {c[0] for c in Buyurtma.PAY_STATUS}
    return "pend_pay" if "pend_pay" in allowed else "none"

def _extract_lat_lng(data: dict | str):
    """
    Lat/Lng‚Äô–Ω–∏ —Ç—É—Ä–ª–∏ —Ñ–æ—Ä–º–∞—Ç–¥–∞–Ω —û“õ–∏–± –±–µ—Ä–∞–¥–∏.
    “ö—û–ª–ª–∞–±-quvvatlay–¥–∏:
      1) {"lat": 39.041069, "lng": 65.584425}
      2) {"coords": "39.041069, 65.584425"}  # —ë–∫–∏: "latlng", "location", "point", "geo", "coord"
      3) –ë—É—Ç—É–Ω –±–æ–¥–∏ –±–∏—Ä “õ–∞—Ç–æ—Ä –º–∞—Ç–Ω –±—û–ª—Å–∞: "39.041069, 65.584425"
    “ö–∞–π—Ç–∞—Ä–∞–¥–∏: (lat, lng) | (None, None)
    """
    # 1) –û–¥–¥–∏–π –º–∞–π–¥–æ–Ω–ª–∞—Ä
    if isinstance(data, dict):
        lat = data.get("lat") or data.get("latitude")
        lng = data.get("lng") or data.get("lon") or data.get("long") or data.get("longitude")
        if lat is not None and lng is not None:
            try:
                return float(lat), float(lng)
            except Exception:
                pass

        # 2) –ë–∏—Ä “õ–∞—Ç–æ—Ä–ª–∏ –≤–∞—Ä–∏–∞–Ω—Ç–Ω–∏ –∏–∑–ª–∞—à
        for k in ("coords", "latlng", "location", "point", "geo", "coord"):
            if k in data and data[k]:
                line = str(data[k])
                break
        else:
            line = None
    else:
        # JSON —ç–º–∞—Å, –±—É—Ç—É–Ω –±–æ–¥–∏ ‚Äî –º–∞—Ç–Ω –±—û–ª–≥–∞–Ω “≥–æ–ª–∞—Ç
        line = str(data or "")

    if line:
        # "39.041069, 65.584425" –∫–∞–±–∏: –ª–∞—Ç, –ª–æ–Ω–≥ (“õ–∞–≤—Å/–±—û—à–ª–∏“õ/“õ—û—à–∏–º—á–∞ –±–µ–ª–≥–∏–ª–∞—Ä–≥–∞ —á–∏–¥–∞–º–ª–∏)
        m = re.search(r'(-?\d+(?:\.\d+)?)\s*[,;]\s*(-?\d+(?:\.\d+)?)', line)
        if m:
            lat_s, lng_s = m.group(1), m.group(2)
            try:
                return float(lat_s), float(lng_s)
            except Exception:
                pass

    return None, None

# --- üÜï ORDER NUMBER GENERATOR ---
def _format_segment(n: int, min_width: int = 2) -> str:
    """
    –°–µ–≥–º–µ–Ω—Ç–Ω–∏ –∫–∞–º–∏–¥–∞ 2 —Ä–∞–∑—Ä—è–¥–≥–∞—á–∞ 0 –±–∏–ª–∞–Ω —Ç—û–ª–¥–∏—Ä–∏–± –±–µ—Ä–∞–¥–∏.
    –ê–≥–∞—Ä —Å–æ–Ω 2 —Ä–∞–∑—Ä—è–¥–¥–∞–Ω –∫–∞—Ç—Ç–∞ –±—û–ª—Å–∞, —û–∑ “≥–æ–ª–∏—á–∞ “õ–æ–ª–∞–¥–∏ (–º–∞—Å–∞–ª–∞–Ω: 128 ‚Üí "128").
    """
    s = str(int(n))
    result = s.zfill(min_width) if len(s) < min_width else s
    print(f"–ò–∫–∫–∏ —Ä–∞–∑—Ä—è–¥–ª–∏ —Å–∏–≥–º–µ–Ω—Ç {result}")
    return result

def _next_order_num(suv_soni: int) -> str:
    """
    –ô–∏–ª/–æ–π/–∫—É–Ω –±—û–π–∏—á–∞ –ñ–ê–ú–ò –ë–£–Æ–†–¢–ú–ê–õ–ê–† —Å–æ–Ω–∏–≥–∞ suv_soni'–Ω–∏ “õ—û—à–∏–±,
    order_num —Å–µ–≥–º–µ–Ω—Ç–ª–∞—Ä–∏–Ω–∏ —è—Ä–∞—Ç–∞–¥–∏.
    –ë–∞–∑–∞ –º—É—Ç–ª–∞“õ–æ –±—û—à –±—û–ª—Å–∞ ‚Äî "01-01-01".
    """
    suv_soni = int(suv_soni or 0)
    if suv_soni <= 0:
        suv_soni = 1  # —Ö–∞–≤—Ñ—Å–∏–∑–ª–∏–∫ —É—á—É–Ω

    now_uz = timezone.localtime(timezone.now())
    today   = now_uz.date()
    y_start = today.replace(month=1, day=1)
    m_start = today.replace(day=1)

    with transaction.atomic():
        # –ë–∏—Ä –≤–∞“õ—Ç–¥–∞ —Ñ–∞“õ–∞—Ç –±–∏—Ç—Ç–∞ –≤–æ—Ä–∫–µ—Ä —Å–∞–Ω–∞—à–∏ —É—á—É–Ω: advisory lock
        with connection.cursor() as cur:
            cur.execute("SELECT pg_advisory_xact_lock(hashtext(%s))", ["buyurtma_order_num"])

        total_all = Buyurtma.objects.all().only("id").count()
        if total_all == 0:
            # –ë–∞–∑–∞ –±—û—à –±—û–ª—Å–∞ “≥–∞–º –∞–≤–≤–∞–ª–æ –±–∞–∑–∞–≤–∏–π 01-01-01 “õ–∞–π—Ç–∞—Ä–∞–º–∏–∑
            return "01-01-01"

        # ‚úÖ –°–∏–∑ –∞–π—Ç–≥–∞–Ω–∏–¥–µ–∫ count() + suv_soni
        y_count = Buyurtma.objects.filter(sana__gte=y_start, sana__lte=today).only("id").count() + suv_soni
        m_count = Buyurtma.objects.filter(sana__gte=m_start, sana__lte=today).only("id").count() + suv_soni
        d_count = Buyurtma.objects.filter(sana=today).only("id").count() + suv_soni

        # –§–æ—Ä–º–∞—Ç: YY-MM-DD —Å–µ–≥–º–µ–Ω—Ç–ª–∞—Ä –∫–∞–±–∏, –∫–∞–º–∏–¥–∞ 2 —Ä–∞–∑—Ä—è–¥
        return f"{_format_segment(y_count, 2)}-{_format_segment(m_count, 2)}-{_format_segment(d_count, 2)}"
    
    
# ------------------------------
# –ë–∏–∑–Ω–µ—Å—Å “≥—É–¥—É–¥–Ω–∏ —Ç–µ–∫—à–∏—Ä–∏—à (PostGIS)
# ------------------------------
def _within_business_area(business_id: int, lat: float, lng: float) -> bool:
    # Business‚Äôdan viloyat‚Äô–Ω–∏ –æ–ª–∞–º–∏–∑
    viloyat = Business.objects.filter(id=business_id).values_list("viloyat", flat=True).first()
    if not viloyat:
        print(f"[AREA] business_id={business_id} uchun viloyat topilmadi")
        return False

    # 1) –≠–Ω–≥ —è“õ–∏–Ω –º–∞—Ä–∫–∞–∑–≥–∞—á–∞ –º–∞—Å–æ—Ñ–∞–Ω–∏ “≥–∏—Å–æ–±–ª–∞—à (–º–µ—Ç—Ä–¥–∞), –∫–µ–π–∏–Ω –∫–º–≥–∞ –∞–π–ª–∞–Ω—Ç–∏—Ä–∞–º–∏–∑
    sql = """
    SELECT
      g.shaxar_yoki_tuman_nomi,
      g.radius_km,
      ST_Distance(
        g.center_geog,
        ST_SetSRID(ST_MakePoint(%s, %s), 4326)::geography
      ) AS dist_m
    FROM public.geo_list g
    WHERE g.viloyat = %s
    ORDER BY dist_m ASC
    LIMIT 1;
    """

    with connection.cursor() as cur:
        # Eslatma: MakePoint(lng, lat)
        cur.execute(sql, [float(lng), float(lat), viloyat])
        row = cur.fetchone()

    if not row:
        print(f"[AREA] viloyat='{viloyat}' uchun geo_list topilmadi")
        return False

    name, radius_km, dist_m = row
    dist_km = float(dist_m) / 1000.0
    radius_km = float(radius_km or 0)
    ok = dist_km <= radius_km

    # üîé –ö–æ–Ω—Å–æ–ª–≥–∞ –¥–µ–±–∞–≥ —á–∏“õ–∏—à–∏:
    print(
        f"[AREA] biz_id={business_id} viloyat={viloyat} "
        f"target=({lat:.6f},{lng:.6f}) nearest='{name}' "
        f"dist_km={dist_km:.3f} radius_km={radius_km:.0f} => ok={ok}"
    )

    return ok

# ------------------------------
# –ë–∏–∑–Ω–µ—Å—Å ID –±—û–π–∏—á–∞ –π–∏–ª –≤–∞ –æ–π –±–æ—à–∏–¥–∞–Ω –±—É—é—Ä—Ç–º–∞ —Å–æ–Ω–∏–Ω–∏ —Å–∞–Ω–∞—à
# ------------------------------
def _inc_month_year_counters(business_id: int, suv_soni: int) -> int:
    """
    public.accounts_business.oy_bosh_sotil_suv_soni –≤–∞
    public.accounts_business.yil_bosh_sotil_suv_soni –Ω–∏ –∞—Ç–æ–º–∞—Ä —Ä–∞–≤–∏—à–¥–∞ oshiradi.
    NULL -> 0 “≥–∏—Å–æ–±–ª–∞–Ω–∞–¥–∏, keyin + suv_soni “õ–∏–ª–∞–¥–∏.
    “ö–∞–π—Ç–∞—Ä–∏–ª–∞–¥–∏: update “õ–∏–ª–∏–Ω–≥–∞–Ω “õ–∞—Ç–æ—Ä–ª–∞—Ä —Å–æ–Ω–∏ (0 —ë–∫–∏ 1).
    """
    suv_soni = int(suv_soni or 0)
    if suv_soni <= 0:
        return 0
    return Business.objects.filter(id=business_id).update(
        oy_bosh_sotil_suv_soni = Coalesce(F("oy_bosh_sotil_suv_soni"), 0) + suv_soni,
        yil_bosh_sotil_suv_soni = Coalesce(F("yil_bosh_sotil_suv_soni"), 0) + suv_soni,
    )




# ------------------------------
# –ë—É—é—Ä—Ç–º–∞ —è—Ä–∞—Ç–∏—à
# ------------------------------
@csrf_exempt
@require_POST
def create_buyurtma(request):
    # 1) Payload
    if request.content_type and "application/json" in request.content_type.lower():
        data = json.loads((request.body or b"").decode("utf-8") or "{}")
    else:
        data = request.POST.dict()

    # 2) –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è —Ö–∞–±–∞—Ä–ª–∞—Ä–∏ –≤–∞ —Ç–∏–ª
    _msg = {
        "out_of_area": {
            "uz":     "–Æ–±–æ—Ä–∏–ª–≥–∞–Ω –ª–æ–∫–∞—Ü–∏—è —Ñ–∞–æ–ª–∏—è—Ç —é—Ä–∏—Ç–∏—à “≥—É–¥—É–¥–∏–¥–∞–Ω —Ç–∞—à“õ–∞—Ä–∏–¥–∞. –õ–æ–∫–∞—Ü–∏—è –Ω–æ—Ç—û“ì—Ä–∏.",
            "uz_lat": "Yuborilgan lokatsiya faoliyat yuritish hududidan tashqarida. Lokatsiya noto‚Äòg‚Äòri.",
            "ru":     "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –ª–æ–∫–∞—Ü–∏—è –≤–Ω–µ –∑–æ–Ω—ã –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏. –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –ª–æ–∫–∞—Ü–∏—è.",
            "en":     "The sent location is outside the service area. Invalid location.",
        },
        "check_failed": {
            "uz":     "–õ–æ–∫–∞—Ü–∏—è–Ω–∏ —Ç–µ–∫—à–∏—Ä–∏—à–¥–∞ –Ω–æ—Å–æ–∑–ª–∏–∫. –ö–µ–π–∏–Ω—Ä–æ“õ —è–Ω–∞ —É—Ä–∏–Ω–∏–± –∫—û—Ä–∏–Ω–≥.",
            "uz_lat": "Lokatsiyani tekshirishda nosozlik. Keyinroq yana urinib ko‚Äòring.",
            "ru":     "–°–±–æ–π –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ª–æ–∫–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            "en":     "Failed to verify location. Please try again later.",
        },
    }
    lang = (str(data.get("lang") or "—É–∑")).lower()
    if lang not in {"uz", "uz_lat", "ru", "en"}:
        lang = "uz"

    # 3) –ú–∞–∂–±—É—Ä–∏–π –º–∞–π–¥–æ–Ω–ª–∞—Ä
    try:
        business_id = int(data.get("business_id") or 0)
    except ValueError:
        business_id = 0
    client_tg_id = data.get("client_tg_id")
    client_tel_num = _normalize_phone(data.get("client_tel_num", ""))

    try:
        suv_soni = int(data.get("suv_soni") or 0)
    except ValueError:
        suv_soni = 0

    # 4) –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ –ø–∞—Ä—Å
    lat_in, lng_in = _extract_lat_lng(data)    
    try:
        lat_f = float(lat_in); lng_f = float(lng_in)
    except (TypeError, ValueError):
        return JsonResponse({"detail": "lat/lng —Ñ–æ—Ä–º–∞—Ç –Ω–æ—Ç—û“ì—Ä–∏."}, status=400)
  
    # 5) –ê—Å–æ—Å–∏–π –≤–∞–ª–∏–¥–∞—Ü–∏—è–ª–∞—Ä
    if not business_id:
        return JsonResponse({"detail": "business_id —Ç–∞–ª–∞–± “õ–∏–ª–∏–Ω–∞–¥–∏."}, status=400)
    if not client_tel_num:
        return JsonResponse({"detail": "–ë—É—é—Ä—Ç–º–∞—á–∏ —Ç–µ–ª–µ—Ñ–æ–Ω —Ä–∞“õ–∞–º–∏ —Ç–∞–ª–∞–± “õ–∏–ª–∏–Ω–∞–¥–∏."}, status=400)
    if suv_soni <= 0:
        return JsonResponse({"detail": "–°—É–≤ —Å–æ–Ω–∏ 1 –¥–∞–Ω –∫–∞—Ç—Ç–∞ –±—û–ª—Å–∏–Ω."}, status=400)
    if lat_in is None or lng_in is None:
        return JsonResponse({"detail": "lat/lng –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–ª–∞—Ä–∏ —Ç–∞–ª–∞–± “õ–∏–ª–∏–Ω–∞–¥–∏."}, status=400)

    # 6) –•–∏–∑–º–∞—Ç “≥—É–¥—É–¥–∏ —Ç–µ–∫—à–∏—Ä—É–≤–∏ (–±–∏—Ä –º–∞—Ä—Ç–∞)
    try:
        ok = _within_business_area(business_id, lat_f, lng_f)
    except Exception:
        return JsonResponse({"detail": _msg["check_failed"][lang]}, status=500)
    if not ok:
        return JsonResponse({"detail": _msg["out_of_area"][lang]}, status=400)

    # 7) –î–∏–∞–ø–∞–∑–æ–Ω –≤–∞ Decimal –≥–∞ –∫–æ–Ω–≤–µ—Ä—Ç (—Å–∞“õ–ª–∞—à —É—á—É–Ω)
    try:
        lat = Decimal(str(lat_f)); lng = Decimal(str(lng_f))
    except InvalidOperation:
        return JsonResponse({"detail": "lat/lng —Ñ–æ—Ä–º–∞—Ç –Ω–æ—Ç—û“ì—Ä–∏."}, status=400)
    if not (-90 <= lat <= 90 and -180 <= lng <= 180):
        return JsonResponse({"detail": "lat/lng –∫–æ—Ä–¥–∏–Ω–∞—Ç–∞–ª–∞—Ä –¥–∏–∞–ø–∞–∑–æ–Ω–∏ –Ω–æ—Ç—û“ì—Ä–∏."}, status=400)

    if not Business.objects.filter(id=business_id).exists():
        return JsonResponse({"detail": "–ë—É–Ω–¥–∞–π business_id –º–∞–≤–∂—É–¥ —ç–º–∞—Å."}, status=404)

    # 8) “ö–æ–ª–≥–∞–Ω –º–∞–π–¥–æ–Ω–ª–∞—Ä
    acc = data.get("location_accuracy")
    src = (data.get("location_source") or "manual").lower()
    manzil = (data.get("manzil") or "").strip()    
        # üÜï Izoh (several possible keys: "manzil_izoh" or "izoh")
    manzil_izoh = (data.get("manzil_izoh") or data.get("izoh") or "")
    manzil_izoh = manzil_izoh.strip() or None

    now_uz = timezone.localtime(timezone.now())
    
    attempt = 0
    last_err = None
    while attempt < 5:
        attempt += 1
        order_num = _next_order_num(suv_soni)
        try:
            with transaction.atomic():
                obj = Buyurtma.objects.create(
                    business_id=business_id,
                    sana=now_uz.date(),
                    vaqt=now_uz.time().replace(microsecond=0),
                    client_tg_id=(int(client_tg_id) if str(client_tg_id).isdigit() else None),
                    client_tel_num=client_tel_num,
                    suv_soni=suv_soni,
                    manzil=manzil,
                    manzil_izoh=manzil_izoh,
                    buyurtma_statusi="pending",
                    pay_status=_default_pay_status(),
                    lat=lat,
                    lng=lng,
                    location_accuracy=(int(acc) if acc else None),
                    location_source=src if src in {"tg", "manual", "geocode"} else "manual",
                    order_num=order_num,  # üÜï
                )
                
                 # üÜï –û–π/–ô–∏–ª –±–æ—à–∏–¥–∞–Ω —Å–æ—Ç–∏–ª–≥–∞–Ω —Å—É–≤ —Å–æ–Ω–∏–Ω–∏ increment “õ–∏–ª–∞–º–∏–∑
                updated = _inc_month_year_counters(business_id, suv_soni)
                if updated == 0:
                    logger.warning("Business %s topilmadi, counters yangilanmadi", business_id)
                
            break  # –º—É–≤–∞—Ñ—Ñ–∞“õ–∏—è—Ç–ª–∏ —è—Ä–∞—Ç–∏–ª–¥–∏
        except IntegrityError as e:
            # –ú–∞—Å–∞–ª–∞–Ω, order_num unique –±—É–∑–∏–ª—Å–∞ ‚Äî —è–Ω–∞ –±–∏—Ä –º–∞—Ä—Ç–∞ —É—Ä–∏–Ω–∞–º–∏–∑
            last_err = e
            continue
    print("attempt —Å–∏–≥–º–µ–Ω—Ç–∏–¥–∞ “õ—û—à–∏–ª–≥–∞–Ω —Ä–∞–∑—Ä—è–¥ —Å–æ–Ω–∏-", attempt, "—Ç–∞")        
    if attempt >= 5 and last_err:
        return JsonResponse(
            {"detail": "–ò—á–∫–∏ —Ä–∞“õ–∞–º–Ω–∏ —è—Ä–∞—Ç–∏—à–¥–∞ –º—É–∞–º–º–æ. –ò–ª—Ç–∏–º–æ—Å, —è–Ω–∞ —É—Ä–∏–Ω–∏–± –∫—û—Ä–∏–Ω–≥."},
            status=500
        )
        
    return JsonResponse({
        "message": "–ë—É—é—Ä—Ç–º–∞ –º—É–≤–∞—Ñ—Ñ–∞“õ–∏—è—Ç–ª–∏ —è—Ä–∞—Ç–∏–ª–¥–∏.",
        "buyurtma_id": obj.id,
        "order_num": obj.order_num,  # üÜï –∫–ª–∏–µ–Ω—Ç–≥–∞ “≥–∞–º –±–µ—Ä–∞–º–∏–∑
        "status": obj.buyurtma_statusi,
        "pay_status": obj.pay_status,
        "sana": str(obj.sana),
        "vaqt": str(obj.vaqt),
        "manzil": obj.manzil,
        "coords": {
            "lat": float(obj.lat),
            "lng": float(obj.lng),
            "source": obj.location_source,
            "accuracy": obj.location_accuracy
        }
    }, status=201)