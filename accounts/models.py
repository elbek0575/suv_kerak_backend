from django.db import models
from django.contrib.auth.models import AbstractUser
from django.core.exceptions import ValidationError
from django.conf import settings
from django.db import models
from django.contrib.auth import get_user_model

class Business(models.Model):
    name = models.CharField(max_length=120, unique=True)

    # üü° –°–∫—Ä–∏–Ω–¥–∞–≥–∏ —è–Ω–≥–∏ —É—Å—Ç—É–Ω–ª–∞—Ä
    sana          = models.DateField(null=True, blank=True)  # date
    tg_token      = models.BigIntegerField(unique=True, null=True, blank=True)
    link_tg_group = models.BigIntegerField(unique=True, null=True, blank=True)

    viloyat = models.TextField(null=True, blank=True)
    shaxar  = models.TextField(null=True, blank=True)
    tuman   = models.TextField(null=True, blank=True)

    grated = models.DateTimeField(auto_now_add=True)  # time_stamp

    agent_name    = models.CharField(max_length=55, null=True, blank=True)
    agent_promkod = models.TextField(null=True, blank=True)

    # –°—É–≤ –Ω–∞—Ä—Ö–ª–∞—Ä–∏ (—Ñ–∞–æ–ª –¥–∏–∞–ø–∞–∑–æ–Ω–ª–∞—Ä) ‚Äî JSONB
    # [{"min":0,"max":100,"price":10000,"currency":"UZS"}, ...]
    service_price_rules = models.JSONField(default=list, blank=True)

    # –î–∏–∞–ø–∞–∑–æ–Ω–ª–∞—Ä “õ—û–ª–ª–∞–Ω–∞–¥–∏–≥–∞–Ω –¥–∞–≤—Ä: month/year
    DIAP_DAVR = (("month", "month"), ("year", "year"))
    narxlar_diap_davri = models.CharField(max_length=8, choices=DIAP_DAVR, default="month")

    # ‚Äú?‚Äù —É—Å—Ç—É–Ω–ª–∞—Ä ‚Äî “≥–∏—Å–æ–±–ª–∞–≥–∏—á–ª–∞—Ä (“≥–∞–º—ë–Ω–±–æ–ø —Ç–∏–ø: PositiveInteger)
    yil_bosh_sotil_suv_soni = models.PositiveIntegerField(default=0)
    oy_bosh_sotil_suv_soni  = models.PositiveIntegerField(default=0)  
     

    created_at = models.DateTimeField(auto_now_add=True)

    class Meta:
        db_table = "accounts_business"
        verbose_name_plural = "–ë–∏–∑–Ω–µ—Å—Å —ç–≥–∞—Å–∏ —Ç—É—Ä–¥–∞–≥–∏ —Ñ–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏–ª–∞—Ä"
        indexes = [
            models.Index(fields=["narxlar_diap_davri"], name="idx_business_diap_davr"),
        ]

    def __str__(self): 
        return self.name

    # –ò—Ö—Ç–∏—ë—Ä–∏–π: JSON –≤–∞–ª–∏–¥–∞—Ü–∏—è—Å–∏ (“õ–∏—Å“õ–∞)
    def clean(self):
        rules = self.service_price_rules or []
        segs = []
        for r in rules:
            if not isinstance(r, dict):
                raise ValidationError("service_price_rules —ç–ª–µ–º–µ–Ω—Ç–ª–∞—Ä–∏ dict –±—û–ª—Å–∏–Ω.")
            mn = int(r.get("min", 0))
            mx = r.get("max", None)
            if mx is not None:
                mx = int(mx)
            price = int(r.get("price", 0))
            if mn < 0: raise ValidationError("min –º–∞–Ω—Ñ–∏–π –±—û–ª–º–∞–π–¥–∏.")
            if mx is not None and mx < mn: raise ValidationError("max >= min –±—û–ª—Å–∏–Ω.")
            if price <= 0: raise ValidationError("price –º—É—Å–±–∞—Ç –±—û–ª—Å–∏–Ω.")
            segs.append((mn, mx))
        segs.sort(key=lambda x: x[0])
        for i in range(1, len(segs)):
            pmin, pmax = segs[i-1]
            cmin, _    = segs[i]
            if pmax is None or pmax >= cmin:
                raise ValidationError("–ù–∞—Ä—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–ª–∞—Ä–∏ —û–∑–∞—Ä–æ —Ç—û“õ–Ω–∞—à–¥–∏.")

class User(AbstractUser):
    ROLE_CHOICES = (("BOSS","Boss"), ("COURIER","Courier"))
    role = models.CharField(max_length=10, choices=ROLE_CHOICES)
    phone = models.CharField(max_length=20, blank=True, null=True)
    business = models.ForeignKey(Business, on_delete=models.PROTECT, null=True, blank=True)


User = get_user_model()

class UserBoss(models.Model):
    """
    public.user_boss –∂–∞–¥–≤–∞–ª–∏–≥–∞ –º–æ—Å –∫–µ–ª–∞–¥–∏.
    –≠—Å–ª–∞—Ç–º–∞: –±–∏–æ–º–µ—Ç—Ä–∏–∫ 'bio_data' –±–∞–∑–∞–≥–∞ —Å–∞“õ–ª–∞–Ω–º–∞–π–¥–∏ (–º–∞—Ö—Ñ–∏–π–ª–∏–∫/“õ–æ–Ω—É–Ω —Ç–∞–ª–∞–±–ª–∞—Ä–∏).
    """
    id = models.BigAutoField(primary_key=True)  # bigserial
    sana = models.DateField()                   # date

    # Telegram –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä (–º–∞—Å–∞–ª–∞–Ω, BOSS Telegram ID)
    boss_id = models.BigIntegerField(unique=True)         # int8, —É–Ω–∏–∫–∞–ª
    boss_name = models.CharField(max_length=55)           # varchar(55)
    boss_tel_num = models.CharField(max_length=20, unique=True, blank=True, null=True)

    # ‚úÖ –û—Ä—Ç–∏“õ—á–∞ –º–∞–π–¥–æ–Ω–ª–∞—Ä –æ–ª–∏–± —Ç–∞—à–ª–∞–Ω–¥–∏ (—É–ª–∞—Ä Business'–¥–∞ —Å–∞“õ–ª–∞–Ω–∞–¥–∏):
    # tg_token, link_tg_group, viloyat, shahar, tuman,
    # agent_promkod, kuryer_id, agent_name

    # –ü–∞—Ä–æ–ª/–ø–∏–Ω (–∏—Ö—Ç–∏—ë—Ä–∏–π)
    password = models.CharField(max_length=128, blank=True, null=True)  # –ø–∞—Ä–æ–ª (hashed –±—û–ª–∏—à–∏ –∫–µ—Ä–∞–∫)
    pin_code = models.CharField(max_length=8,   blank=True, null=True)  # –ø–∏–Ω –∫–æ–¥

    # –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ç–∏–ª–∏
    lang = models.TextField(blank=True, null=True)

    # –Ø—Ä–∞—Ç–∏–ª–∏—à –≤–∞“õ—Ç–∏–Ω–∏ —Å–∞“õ–ª–∞—à
    grated = models.DateTimeField(auto_now_add=True)  # timestamp

    # üîó –ë–∏—Ä –±–∏–∑–Ω–µ—Å–≥–∞ –∫—û–ø –±–æ—Å—Å
    business = models.ForeignKey(
        "Business",
        on_delete=models.PROTECT,
        related_name="boss_users",
        null=True, blank=True
    )

    # (–∏—Ö—Ç–∏—ë—Ä–∏–π) Django User –±–∏–ª–∞–Ω –±–æ“ì–ª–∞—à
    user = models.OneToOneField(
        settings.AUTH_USER_MODEL,
        on_delete=models.SET_NULL,
        null=True, blank=True,
        related_name="boss_profile"
    )

    class Meta:
        db_table = "user_boss"
        verbose_name = "Boss"
        verbose_name_plural = "–ë–æ—Å—Å —Ç—É—Ä–¥–∞–≥–∏ —Ñ–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏–ª–∞—Ä"
        indexes = [
            models.Index(fields=["boss_id"], name="idx_userboss_bossid"),
        ]

    def __str__(self):
        return f"{self.boss_name} ({self.boss_id})"
