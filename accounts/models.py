from django.db import models
from django.contrib.auth.models import AbstractUser
from django.core.exceptions import ValidationError
from django.conf import settings
from django.db import models
from django.contrib.auth import get_user_model

class Business(models.Model):
    name = models.CharField(max_length=120, unique=True)

    sana          = models.DateField(null=True, blank=True)
    tg_token      = models.TextField(unique=True, null=True, blank=True)             # üîÅ –º–∞—Ç–Ω (token)
    link_tg_group = models.URLField(max_length=255, unique=True, null=True, blank=True)

    viloyat = models.TextField(null=True, blank=True)
    shaxar  = models.TextField(null=True, blank=True)
    tuman   = models.TextField(null=True, blank=True)

    grated = models.DateTimeField(auto_now_add=True)

    agent_name    = models.CharField(max_length=55, null=True, blank=True)
    agent_promkod = models.TextField(null=True, blank=True)

    # üßæ –°—É–≤ –Ω–∞—Ä—Ö–ª–∞—Ä–∏ JSON (–¥–∏–∞–ø–∞–∑–æ–Ω–ª–∞—Ä)
    service_price_rules = models.JSONField(default=list, blank=True)

    DIAP_DAVR = (("month", "month"), ("year", "year"))
    narxlar_diap_davri = models.CharField(max_length=8, choices=DIAP_DAVR, default="month")

    # üìà “≥–∏—Å–æ–±–ª–∞–≥–∏—á–ª–∞—Ä
    yil_bosh_sotil_suv_soni = models.PositiveIntegerField(default=0)
    oy_bosh_sotil_suv_soni  = models.PositiveIntegerField(default=0)

    # üü° –°–∞—Ä–∏“õ —É—Å—Ç—É–Ω–ª–∞—Ä (–∏—Ö—Ç–∏—ë—Ä–∏–π, —Ö–∞–≤—Ñ—Å–∏–∑–ª–∏–∫ —É—á—É–Ω plain –ø–∞—Ä–æ–ª—å —Å–∞“õ–ª–∞–º–∞—Å–ª–∏–∫ –∫–µ—Ä–∞–∫)
    password = models.CharField(max_length=128, null=True, blank=True)  # “≥–µ—á “õ–∞—á–æ–Ω –æ—á–∏“õ –ø–∞—Ä–æ–ª —Å–∞“õ–ª–∞–º–∞–Ω–≥!
    pin_code = models.CharField(max_length=8,   null=True, blank=True)

    created_at = models.DateTimeField(auto_now_add=True)

    class Meta:
        db_table = "accounts_business"
        verbose_name_plural = "–ë–∏–∑–Ω–µ—Å–ª–∞—Ä"
        indexes = [
            models.Index(fields=["narxlar_diap_davri"], name="idx_business_diap_davr"),
            models.Index(fields=["tg_token"], name="idx_business_tg_token"),
        ]

    def __str__(self):
        return self.name

    # JSON –Ω–∏ “õ–∏—Å“õ–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—è “õ–∏–ª–∏—à
    def clean(self):
        rules = self.service_price_rules or []
        segs = []
        for r in rules:
            if not isinstance(r, dict):
                raise ValidationError("service_price_rules —ç–ª–µ–º–µ–Ω—Ç–ª–∞—Ä–∏ dict –±—û–ª—Å–∏–Ω.")
            mn = int(r.get("min", 0))
            mx = r.get("max", None)
            if mx is not None:
                mx = int(mx)
            price = int(r.get("price", 0))
            if mn < 0: raise ValidationError("min –º–∞–Ω—Ñ–∏–π –±—û–ª–º–∞–π–¥–∏.")
            if mx is not None and mx < mn: raise ValidationError("max >= min –±—û–ª—Å–∏–Ω.")
            if price <= 0: raise ValidationError("price –º—É—Å–±–∞—Ç –±—û–ª—Å–∏–Ω.")
            segs.append((mn, mx))
        segs.sort(key=lambda x: x[0])
        for i in range(1, len(segs)):
            pmin, pmax = segs[i-1]
            cmin, _    = segs[i]
            if pmax is None or pmax >= cmin:
                raise ValidationError("–ù–∞—Ä—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–ª–∞—Ä–∏ —û–∑–∞—Ä–æ —Ç—û“õ–Ω–∞—à–¥–∏.")

class User(AbstractUser):
    ROLE_CHOICES = (("BOSS","Boss"), ("COURIER","Courier"))
    role = models.CharField(max_length=10, choices=ROLE_CHOICES)
    phone = models.CharField(max_length=20, blank=True, null=True)
    business = models.ForeignKey(Business, on_delete=models.PROTECT, null=True, blank=True)


User = get_user_model()

class UserMenedjer(models.Model):
    """
    public.user_menedjer –∂–∞–¥–≤–∞–ª–∏.
    """
    id   = models.BigAutoField(primary_key=True)          # bigserial
    sana = models.DateField()                             # date

    # üëá “õ–∞–π—Ç–∞ –Ω–æ–º–ª–∞–Ω–≥–∞–Ω —É—Å—Ç—É–Ω–ª–∞—Ä
    menedjer_id   = models.BigIntegerField(unique=True)   # int8, —É–Ω–∏–∫–∞–ª (—ç—Å–∫–∏ boss_id)
    menedjer_name = models.CharField(max_length=55)       # varchar(55) (—ç—Å–∫–∏ boss_name)

    # (–±—û—à–ª–∞–± “õ—û—è–º–∏–∑ ‚Äî –∞–≤–≤–∞–ª–≥–∏ –º–æ–¥–µ–ª–∏–Ω–≥–∏–∑–¥–∞ –±–æ—Ä —ç–¥–∏; —Ö–æ“≥–ª–∞—Å–∞–Ω–≥–∏–∑ –∫–µ–π–∏–Ω –æ–ª–∏–± —Ç–∞—à–ª–∞–π–º–∏–∑)
    boss_tel_num = models.CharField(max_length=20, unique=True, blank=True, null=True)

    # –ü–∞—Ä–æ–ª/–ü–ò–ù (–∏—Ö—Ç–∏—ë—Ä–∏–π)
    password = models.CharField(max_length=128, blank=True, null=True)
    pin_code = models.CharField(max_length=8,   blank=True, null=True)

    # –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ç–∏–ª–∏
    lang = models.TextField(blank=True, null=True)

    # –Ø—Ä–∞—Ç–∏–ª–∏—à –≤–∞“õ—Ç–∏
    grated = models.DateTimeField(auto_now_add=True)

    # üîó –ë–∏—Ä –±–∏–∑–Ω–µ—Å–≥–∞ –±–∏—Ä –Ω–µ—á—Ç–∞ –º–µ–Ω–µ–∂–µ—Ä
    business = models.ForeignKey(
        "Business",
        on_delete=models.PROTECT,
        related_name="menedjer_users",
        null=True, blank=True
    )

    # (–∏—Ö—Ç–∏—ë—Ä–∏–π) Django User –±–∏–ª–∞–Ω –±–æ“ì–ª–∞—à
    user = models.OneToOneField(
        settings.AUTH_USER_MODEL,
        on_delete=models.SET_NULL,
        null=True, blank=True,
        related_name="menedjer_profile"
    )

    class Meta:
        db_table = "user_menedjer"            # ‚Üê –∂–∞–¥–≤–∞–ª –Ω–æ–º–∏
        verbose_name = "Menedjer"
        verbose_name_plural = "Menedjerlar"
        indexes = [
            models.Index(fields=["menedjer_id"], name="idx_usermenedjer_menedjerid"),
        ]

    def __str__(self):
        return f"{self.menedjer_name} ({self.menedjer_id})"