    # accounts/models.py
from django.db import models
from django.contrib.auth.models import AbstractUser
from django.core.exceptions import ValidationError
from django.conf import settings
from django.db import models
from django.contrib.auth import get_user_model
from django.utils import timezone

# accounts/models.py
from django.db import models
from django.core.exceptions import ValidationError
from django.utils import timezone


class Business(models.Model):
    id = models.BigAutoField(primary_key=True)
    name = models.CharField(max_length=120)  # unique —ç–º–∞—Å ‚Äî —Å–∫—Ä–∏–Ω–¥–∞ –∫—û—Ä–∏–Ω–º–∞–π–¥–∏

    # vaqt –∫–ª–æ–Ω–∫–∞–ª–∞—Ä–∏
    created_at = models.DateTimeField(auto_now_add=True)  # DB'–¥–∞ default now() AT TIME ZONE ... –±–æ—Ä
    last_seen_at = models.DateTimeField(null=True, blank=True)

    # –∞–≥–µ–Ω—Ç –º–∞'lumot–ª–∞—Ä–∏
    agent_name = models.CharField(max_length=55, null=True, blank=True)
    agent_promkod = models.TextField(null=True, blank=True)
    link_tg_group = models.URLField(max_length=255, null=True, blank=True)

    # –Ω–∞—Ä—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–ª–∞—Ä–∏ –¥–∞–≤—Ä–∏ (month/year)
    narxlar_diap_davri = models.CharField(max_length=8, null=True, blank=True, db_index=True)

    # “≥–∏—Å–æ–±–ª–∞–≥–∏—á–ª–∞—Ä
    oy_bosh_sotil_suv_soni = models.IntegerField(null=True, blank=True)
    yil_bosh_sotil_suv_soni = models.IntegerField(null=True, blank=True)

    # —Å–∞–Ω–∞ –≤–∞ —Å–µ—Ä–≤–∏—Å “õ–æ–∏–¥–∞–ª–∞—Ä–∏
    sana = models.DateField(default=timezone.localdate, editable=False)
    service_price_rules = models.JSONField(null=True, blank=True)

    # –º–∞–Ω–∑–∏–ª –≤–∞ TG
    shaxar = models.TextField(null=True, blank=True)
    tg_token = models.TextField(null=True, blank=True)          # unique —ç–º–∞—Å ‚Äî —Å–∫—Ä–∏–Ω–¥–∞ –∫—û—Ä–∏–Ω–º–∞–π–¥–∏
    tuman = models.TextField(null=True, blank=True)
    viloyat = models.TextField(null=True, blank=True)

    # —Ö–∞–≤—Ñ—Å–∏–∑–ª–∏–∫/–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
    # (—Å–∫—Ä–∏–Ω–¥–∞ password varchar(255), pin_code varchar(10))
    password = models.CharField(max_length=255, null=True, blank=True)
    pin_code = models.CharField(max_length=10, null=True, blank=True)

    # —Ç–∏–ª (—Å–∫—Ä–∏–Ω–¥–∞ varchar(6))
    lang = models.CharField(max_length=6, default="uz", db_index=True)

    # —Ç–µ–ª–µ—Ñ–æ–Ω –≤–∞ reset –∫–æ–¥ –º–∞–π–¥–æ–Ω–ª–∞—Ä–∏
    boss_tel_num = models.CharField(max_length=15, null=True, blank=True)
    reset_code = models.CharField(max_length=6, null=True, blank=True)
    reset_code_expires_at = models.DateTimeField(null=True, blank=True)
    reset_code_attempts = models.SmallIntegerField(default=0)

    class Meta:
        managed = False  # –º–∞–≤–∂—É–¥ –∂–∞–¥–≤–∞–ª –±–∏–ª–∞–Ω –º–∏–≥—Ä–∞—Ü–∏—è “õ–∏–ª–º–∞—Å–¥–∞–Ω —Ç—û“ì—Ä–∏–¥–∞–Ω-—Ç—û“ì—Ä–∏ –∏—à–ª–∞—à
        db_table = "accounts_business"
        verbose_name_plural = "–ë–∏–∑–Ω–µ—Å–ª–∞—Ä"
        indexes = [
            models.Index(fields=["narxlar_diap_davri"], name="idx_business_diap_davr"),
            models.Index(fields=["lang"], name="idx_business_lang"),
        ]

    def __str__(self):
        return self.name

    # JSON –Ω–∏ “õ–∏—Å“õ–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—è “õ–∏–ª–∏—à (–∏—Ö—Ç–∏—ë—Ä–∏–π, —û–∑–∏–Ω–≥–∏–∑ “õ—û—à–≥–∞–Ω “õ–æ–∏–¥–∞ —Å–∞“õ–ª–∞–Ω–¥–∏)
    def clean(self):
        rules = self.service_price_rules or []
        segs = []
        for r in rules:
            if not isinstance(r, dict):
                raise ValidationError("service_price_rules —ç–ª–µ–º–µ–Ω—Ç–ª–∞—Ä–∏ dict –±—û–ª—Å–∏–Ω.")
            mn = int(r.get("min", 0))
            mx = r.get("max", None)
            if mx is not None:
                mx = int(mx)
            price = int(r.get("price", 0))
            if mn < 0:
                raise ValidationError("min –º–∞–Ω—Ñ–∏–π –±—û–ª–º–∞–π–¥–∏.")
            if mx is not None and mx < mn:
                raise ValidationError("max >= min –±—û–ª—Å–∏–Ω.")
            if price <= 0:
                raise ValidationError("price –º—É—Å–±–∞—Ç –±—û–ª—Å–∏–Ω.")
            segs.append((mn, mx))
        segs.sort(key=lambda x: x[0])
        for i in range(1, len(segs)):
            pmin, pmax = segs[i - 1]
            cmin, _ = segs[i]
            if pmax is None or pmax >= cmin:
                raise ValidationError("–ù–∞—Ä—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–ª–∞—Ä–∏ —û–∑–∞—Ä–æ —Ç—û“õ–Ω–∞—à–¥–∏.")


class User(AbstractUser):
    ROLE_CHOICES = (("BOSS","Boss"), ("COURIER","Courier"))
    role = models.CharField(max_length=10, choices=ROLE_CHOICES)
    phone = models.CharField(max_length=20, blank=True, null=True)
    business = models.ForeignKey(Business, on_delete=models.PROTECT, null=True, blank=True)


User = get_user_model()

class UserMenedjer(models.Model):
    """
    public.user_menedjer –∂–∞–¥–≤–∞–ª–∏.
    """
    id   = models.BigAutoField(primary_key=True)          # bigserial
    sana = models.DateField()                             # date

    # üëá “õ–∞–π—Ç–∞ –Ω–æ–º–ª–∞–Ω–≥–∞–Ω —É—Å—Ç—É–Ω–ª–∞—Ä
    menedjer_id   = models.BigIntegerField(unique=True)   # int8, —É–Ω–∏–∫–∞–ª (—ç—Å–∫–∏ boss_id)
    menedjer_name = models.CharField(max_length=55)       # varchar(55) (—ç—Å–∫–∏ boss_name)

    # (–±—û—à–ª–∞–± “õ—û—è–º–∏–∑ ‚Äî –∞–≤–≤–∞–ª–≥–∏ –º–æ–¥–µ–ª–∏–Ω–≥–∏–∑–¥–∞ –±–æ—Ä —ç–¥–∏; —Ö–æ“≥–ª–∞—Å–∞–Ω–≥–∏–∑ –∫–µ–π–∏–Ω –æ–ª–∏–± —Ç–∞—à–ª–∞–π–º–∏–∑)
    boss_tel_num = models.CharField(max_length=20, unique=True, blank=True, null=True)

    # –ü–∞—Ä–æ–ª/–ü–ò–ù (–∏—Ö—Ç–∏—ë—Ä–∏–π)
    password = models.CharField(max_length=128, blank=True, null=True)
    pin_code = models.CharField(max_length=8,   blank=True, null=True)

    # –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ç–∏–ª–∏
    lang = models.TextField(blank=True, null=True)

    # –Ø—Ä–∞—Ç–∏–ª–∏—à –≤–∞“õ—Ç–∏
    grated = models.DateTimeField(auto_now_add=True)

    # üîó –ë–∏—Ä –±–∏–∑–Ω–µ—Å–≥–∞ –±–∏—Ä –Ω–µ—á—Ç–∞ –º–µ–Ω–µ–∂–µ—Ä
    business = models.ForeignKey(
        "Business",
        on_delete=models.PROTECT,
        related_name="menedjer_users",
        null=True, blank=True
    )

    # (–∏—Ö—Ç–∏—ë—Ä–∏–π) Django User –±–∏–ª–∞–Ω –±–æ“ì–ª–∞—à
    user = models.OneToOneField(
        settings.AUTH_USER_MODEL,
        on_delete=models.SET_NULL,
        null=True, blank=True,
        related_name="menedjer_profile"
    )

    class Meta:
        db_table = "user_menedjer"            # ‚Üê –∂–∞–¥–≤–∞–ª –Ω–æ–º–∏
        verbose_name = "Menedjer"
        verbose_name_plural = "Menedjerlar"
        indexes = [
            models.Index(fields=["menedjer_id"], name="idx_usermenedjer_menedjerid"),
        ]

    def __str__(self):
        return f"{self.menedjer_name} ({self.menedjer_id})"
    

class GeoList(models.Model):
    """
    public.geo_list
    """
    viloyat = models.CharField(max_length=80, db_index=True)
    shaxar_yoki_tuman_nomi = models.CharField(max_length=120, db_index=True)
    SHAXAR_YOKI_TUMAN_CHOICES = (("—à–∞“≥–∞—Ä", "—à–∞“≥–∞—Ä"), ("—Ç—É–º–∞–Ω", "—Ç—É–º–∞–Ω"))
    shaxar_yoki_tuman = models.CharField(max_length=10, choices=SHAXAR_YOKI_TUMAN_CHOICES, db_index=True)

    class Meta:
        db_table = "geo_list"  # public.geo_list
        verbose_name = "–ì–µ–æ (—à–∞“≥–∞—Ä/—Ç—É–º–∞–Ω)"
        verbose_name_plural = "–ì–µ–æ (—à–∞“≥–∞—Ä/—Ç—É–º–∞–Ω)"
        indexes = [
            models.Index(
                fields=["viloyat", "shaxar_yoki_tuman", "shaxar_yoki_tuman_nomi"],
                name="idx_geo_vil_tur_nomi",
            ),
        ]
        constraints = [
            models.UniqueConstraint(
                fields=["viloyat", "shaxar_yoki_tuman_nomi", "shaxar_yoki_tuman"],
                name="uq_geo_viloyat_nomi_turi",
            )
        ]

    def __str__(self):
        return f"{self.viloyat} ‚Äî {self.shaxar_yoki_tuman_nomi} ({self.shaxar_yoki_tuman})"


METHOD_CHOICES = [("GET","GET"), ("POST","POST"), ("PUT","PUT"), ("PATCH","PATCH"), ("DELETE","DELETE")]
ACTION_CHOICES = [
    ("–ö–∏—Ä–∏—à –º—É–≤–∞—Ñ—Ñ–∞“õ–∏—è—Ç–ª–∏",  "–ö–∏—Ä–∏—à –º—É–≤–∞—Ñ—Ñ–∞“õ–∏—è—Ç–ª–∏"),
    ("login_fail",     "–ö–∏—Ä–∏—à –º—É–≤–∞—Ñ—Ñ–∞“õ–∏—è—Ç—Å–∏–∑"),
    ("reg_ok",         "–†—û–π—Ö–∞—Ç–¥–∞–Ω —û—Ç–¥–∏"),
    ("reg_already",    "–ê–ª–ª–∞“õ–∞—á–æ–Ω —Ä—û–π—Ö–∞—Ç–¥–∞–Ω —û—Ç–≥–∞–Ω"),
    ("fp_start",       "–ü–∞—Ä–æ–ª–Ω–∏ —Ç–∏–∫–ª–∞—à –∫–æ–¥–∏ —é–±–æ—Ä–∏–ª–¥–∏"),
    ("fp_verify_ok",   "–ö–æ–¥ —Ç–∞—Å–¥–∏“õ–ª–∞–Ω–¥–∏"),
    ("fp_verify_fail", "–ö–æ–¥ —Ç–∞—Å–¥–∏“õ–ª–∞–Ω–º–∞–¥–∏"),
]


class AuditLog(models.Model):
    ts          = models.DateTimeField()                          # DB default now()
    actor_id    = models.BigIntegerField(null=True, blank=True, db_index=True)
    action      = models.CharField(max_length=40, db_index=True, choices=ACTION_CHOICES)
    path        = models.TextField(blank=True)
    method      = models.CharField(max_length=8, blank=True, choices=METHOD_CHOICES)
    status      = models.SmallIntegerField(null=True, blank=True)
    ip          = models.GenericIPAddressField(null=True, blank=True)  # PostgreSQL inet
    user_agent  = models.TextField(blank=True)
    object_type = models.CharField(max_length=30, blank=True)
    object_id   = models.BigIntegerField(null=True, blank=True)
    meta        = models.JSONField(null=True, blank=True)              # PostgreSQL jsonb

    class Meta:
        db_table = "audit_log"
        managed = False                     # ‚ùóÔ∏è–∂–∞–¥–≤–∞–ª–Ω–∏ SQL –±–∏–ª–∞–Ω —è—Ä–∞—Ç–≥–∞–Ω–∏–º–∏–∑ —É—á—É–Ω Django “õ–∞–π—Ç–∞ —è—Ä–∞—Ç–º–∞–π–¥–∏
        ordering = ["-ts"]

    def __str__(self):
        return f"[{self.ts:%Y-%m-%d %H:%M:%S}] {self.action} actor={self.actor_id} obj={self.object_type}:{self.object_id}"

    @property
    def path_short(self):
        return (self.path or "")[:80]
