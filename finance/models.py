from django.db import models, transaction
from django.core.exceptions import ValidationError
from accounts.models import Business  # —Ç–µ–Ω–∞–Ω—Ç

class CashBoss(models.Model):
    business = models.ForeignKey(Business, on_delete=models.PROTECT, null=True, blank=True)
    sana = models.DateField()
    vaqt = models.TimeField()

    boss_id = models.BigIntegerField()
    boss_name = models.CharField(max_length=55)

    client_tg_id = models.BigIntegerField(blank=True, null=True)
    client_tel_num = models.CharField(max_length=15, blank=True, null=True)

    buyurtma_num = models.BigIntegerField(blank=True, null=True)
    kuryer_id = models.BigIntegerField()
    kuryer_name = models.CharField(max_length=55)

    income = models.DecimalField(max_digits=14, decimal_places=2, default=0)
    expense = models.DecimalField(max_digits=14, decimal_places=2, default=0)
    balance = models.DecimalField(max_digits=14, decimal_places=2, default=0)

    OPERATION = (("income", "Income"), ("expense", "Expense"))
    cash_operation = models.CharField(max_length=10, choices=OPERATION)

    cash_message = models.CharField(max_length=255, blank=True)
    grated = models.DateTimeField(auto_now_add=True)

    class Meta:
        db_table = "cash_boss"
        verbose_name = "–ë–æ—Å—Å –∫–∞—Å—Å–∞ “≥–∏—Å–æ–±–∏"
        verbose_name_plural = "–ë–æ—Å—Å –∫–∞—Å—Å–∞ “≥–∏—Å–æ–±–∏"
        indexes = [
            models.Index(fields=["business", "boss_id"]),
            models.Index(fields=["business", "kuryer_id"]),
        ]

    def save(self, *args, **kwargs):
        if self.cash_operation == "income":
            self.cash_message = f"–ö—É—Ä–µ—Ä {self.kuryer_name} –¥–∞–Ω –∫–∏—Ä–∏–º –±—É–ª–¥–∏"
        else:
            self.cash_message = "–ù–∞“õ–¥ –ø—É–ª —Ç–æ–ø—à–∏—Ä–∏–ª–¥–∏"
        super().save(*args, **kwargs)


class CashState(models.Model):
    """–ë–æ—Å—Å —Ç–∞—Å–¥–∏“ì–∏–¥–∞–Ω –æ–ª–¥–∏–Ω–≥–∏ —Ö–æ–ª–∞—Ç–ª–∞—Ä."""
    business = models.ForeignKey(Business, on_delete=models.PROTECT)
    sana = models.DateField()
    vaqt = models.TimeField()

    boss_id = models.BigIntegerField()
    boss_name = models.CharField(max_length=55)

    kuryer_id = models.BigIntegerField()
    kuryer_name = models.CharField(max_length=55)

    income = models.DecimalField(max_digits=14, decimal_places=2, default=0)
    expense = models.DecimalField(max_digits=14, decimal_places=2, default=0)
    balance = models.DecimalField(max_digits=14, decimal_places=2, default=0, help_text="–¢–∞—Å–¥–∏“õ –ø–∞–π—Ç–∏–¥–∞ “≥–∏—Å–æ–±–ª–∞–Ω–∞–¥–∏")

    OPERATION = (("income", "Income"), ("expense", "Expense"))
    cash_operation = models.CharField(max_length=10, choices=OPERATION)

    STATUS = (("pending", "Pending"), ("approved", "Approved"), ("rejected", "Rejected"))
    status = models.CharField(max_length=10, choices=STATUS, default="pending")

    tasdiq_vaqti = models.DateTimeField(blank=True, null=True)
    rad_vaqti = models.DateTimeField(blank=True, null=True)

    # —Ç–∞—Å–¥–∏“õ–ª–∞–Ω–≥–∞–Ω–¥–∞ —è—Ä–∞—Ç–∏–ª–≥–∞–Ω CashBoss —ë–∑—É–≤–∏–≥–∞ —Å—Å–ª–∫–∞
    cash_boss = models.OneToOneField(CashBoss, on_delete=models.SET_NULL, null=True, blank=True, related_name="source_state")

    grated = models.DateTimeField(auto_now_add=True)

    class Meta:
        db_table = "cash_state"
        verbose_name = "–ö–∞—Å—Å–∞ “≥–æ–ª–∞—Ç–∏"
        verbose_name_plural = "–ö–∞—Å—Å–∞ “≥–æ–ª–∞—Ç–∏"
        indexes = [
            models.Index(fields=["business", "boss_id", "status"]),
            models.Index(fields=["business", "kuryer_id", "status"]),
        ]

    def clean(self):
        if self.cash_operation == "income":
            if self.income <= 0 or self.expense != 0:
                raise ValidationError("Income —É—á—É–Ω income>0 –≤–∞ expense=0 –±—û–ª–∏—à–∏ –∫–µ—Ä–∞–∫.")
        if self.cash_operation == "expense":
            if self.expense <= 0 or self.income != 0:
                raise ValidationError("Expense —É—á—É–Ω expense>0 –≤–∞ income=0 –±—û–ª–∏—à–∏ –∫–µ—Ä–∞–∫.")

    @transaction.atomic
    def approve(self, now_dt):
        """–ë–æ—Å—Å —Ç–∞—Å–¥–∏“õ–ª–∞–≥–∞–Ω–¥–∞ CashBoss‚Äô–≥–∞ —û—Ç–∫–∞–∑–∏—à –≤–∞ –±–∞–ª–∞–Ω—Å–Ω–∏ —è–Ω–≥–∏–ª–∞—à."""
        if self.status != "pending":
            return self.cash_boss  # –æ–ª–¥–∏–Ω –∏—à–ª–∞–Ω–≥–∞–Ω

        # –æ–ª–¥–∏–Ω–≥–∏ –±–∞–ª–∞–Ω—Å
        last = (
            CashBoss.objects
            .filter(business=self.business, boss_id=self.boss_id)
            .order_by("-grated")
            .first()
        )
        prev_balance = last.balance if last else 0

        new_balance = prev_balance + (self.income or 0) - (self.expense or 0)

        boss = CashBoss.objects.create(
            business=self.business,
            sana=self.sana,
            vaqt=self.vaqt,
            boss_id=self.boss_id,
            boss_name=self.boss_name,
            kuryer_id=self.kuryer_id,
            kuryer_name=self.kuryer_name,
            income=self.income,
            expense=self.expense,
            balance=new_balance,
            cash_operation=self.cash_operation,
        )

        self.cash_boss = boss
        self.balance = new_balance
        self.status = "approved"
        self.tasdiq_vaqti = now_dt
        self.save(update_fields=["cash_boss", "balance", "status", "tasdiq_vaqti"])
        return boss

    def reject(self, now_dt):
        """–ë–æ—Å—Å —Ä–∞–¥ —ç—Ç—Å–∞ ‚Äî CashBoss‚Äô–≥–∞ —û—Ç–∫–∞–∑–∏–ª–º–∞–π–¥–∏."""
        if self.status == "pending":
            self.status = "rejected"
            self.rad_vaqti = now_dt
            self.save(update_fields=["status", "rad_vaqti"])



class CashKuryer(models.Model):
    """
    –ö—É—Ä—å–µ—Ä –∫–∞—Å—Å–∞—Å–∏ –∂–∞–¥–≤–∞–ª–∏.
    –ö–ª–∏–µ–Ω—Ç–¥–∞–Ω –Ω–∞“õ–¥ —Å–æ—Ç—É–≤–ª–∞—Ä ‚Üí –ö–ò–†–ò–ú.
    –ë–æ—Å—Å–≥–∞ –ø—É–ª —Ç–æ–ø—à–∏—Ä–∏—à ‚Üí –ß–ò“ö–ò–ú (–∞–≤–≤–∞–ª CashState‚Äô–≥–∞, —Ç–∞—Å–¥–∏“õ–¥–∞–Ω —Å—û–Ω–≥ CashBoss‚Äô–≥–∞ –∫—û—á–∞–¥–∏).
    """
    id = models.BigAutoField(primary_key=True)   # bigserial
    sana = models.DateField()                   # —Å–∞–Ω–∞
    vaqt = models.TimeField()                   # –≤–∞“õ—Ç

    boss_id = models.BigIntegerField()
    boss_name = models.CharField(max_length=55)

    client_tg_id = models.BigIntegerField()
    client_tel_num = models.CharField(max_length=15)

    buyurtma_num = models.BigIntegerField()     # –±—É—é—Ä—Ç–º–∞ —Ä–∞“õ–∞–º–∏ (–ª–æ–≥ —É—á—É–Ω)
    kuryer_id = models.BigIntegerField()
    kuryer_name = models.CharField(max_length=55)

    # üí∞ –°—É–º–º–∞–ª–∞—Ä
    income  = models.DecimalField(max_digits=14, decimal_places=2, default=0)
    expense = models.DecimalField(max_digits=14, decimal_places=2, default=0)
    balance = models.DecimalField(max_digits=14, decimal_places=2, default=0)

    # üîÅ –û–ø–µ—Ä–∞—Ü–∏—è —Ç—É—Ä–∏
    OPERATION_CHOICES = [
        ("income", "Income"),
        ("expense", "Expense"),
    ]
    cash_operation = models.CharField(max_length=10, choices=OPERATION_CHOICES)

    # üìä “≤–æ–ª–∞—Ç
    STATUS_CHOICES = [
        ("buffer", "Buffer"),          # –∫—É—Ä—å–µ—Ä –∫–∏—Ä–∏—Ç–≥–∞–Ω, —Ç–∞—Å–¥–∏“õ–ª–∞–Ω–º–∞–≥–∞–Ω
        ("approved", "Tasdiqlandi"),   # –±–æ—Å—Å —Ç–∞—Å–¥–∏“õ–ª–∞–≥–∞–Ω
        ("rejected", "Rad etildi"),    # —Ä–∞–¥ —ç—Ç–∏–ª–≥–∞–Ω
    ]
    status = models.CharField(max_length=16, choices=STATUS_CHOICES, default="buffer")

    grated = models.DateTimeField(auto_now_add=True)  # timestamp

    class Meta:
        db_table = "cash_kuryer"
        verbose_name = "–ö—É—Ä–µ—Ä –∫–∞—Å—Å–∞ “≥–∏—Å–æ–±–∏"
        verbose_name_plural = "–ö—É—Ä–µ—Ä –∫–∞—Å—Å–∞ “≥–∏—Å–æ–±–∏"
        indexes = [
            models.Index(fields=["boss_id"], name="idx_ck_boss"),
            models.Index(fields=["kuryer_id"], name="idx_ck_kuryer"),
            models.Index(fields=["client_tel_num"], name="idx_ck_client_tel"),
            models.Index(fields=["buyurtma_num"], name="idx_ck_buyurtma"),
            models.Index(fields=["status"], name="idx_ck_status"),
        ]

    def __str__(self):
        return f"{self.sana} {self.vaqt} | Kuryer: {self.kuryer_name} | Balance: {self.balance}"

    # ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è: 'income' / 'expense' —Ç–µ–∫—à–∏—Ä–∏—à
    def clean(self):
        super().clean()
        if self.cash_operation == "income":
            if self.income <= 0:
                raise ValidationError("Income –æ–ø–µ—Ä–∞—Ü–∏—è—Å–∏–¥–∞ 'income' > 0 –±—û–ª–∏—à–∏ –∫–µ—Ä–∞–∫.")
            if self.expense > 0:
                raise ValidationError("Income –æ–ø–µ—Ä–∞—Ü–∏—è—Å–∏–¥–∞ 'expense' 0 –±—û–ª–∏—à–∏ –∫–µ—Ä–∞–∫.")
        elif self.cash_operation == "expense":
            if self.expense <= 0:
                raise ValidationError("Expense –æ–ø–µ—Ä–∞—Ü–∏—è—Å–∏–¥–∞ 'expense' > 0 –±—û–ª–∏—à–∏ –∫–µ—Ä–∞–∫.")
            if self.income > 0:
                raise ValidationError("Expense –æ–ø–µ—Ä–∞—Ü–∏—è—Å–∏–¥–∞ 'income' 0 –±—û–ª–∏—à–∏ –∫–µ—Ä–∞–∫.")
            
class CourierWaterBottleBalance(models.Model):
    """
    –ö—É—Ä—å–µ—Ä —Ç—û–ª–∞ —Å—É–≤ (19L –±–∞–∫) “≥–∞—Ä–∞–∫–∞—Ç–ª–∞—Ä–∏ –≤–∞ “õ–æ–ª–¥–∏“õ–ª–∞—Ä–∏ –∂—É—Ä–Ω–∞–ª–∏.
    - in_from_boss: –ë–æ—Å—Å–¥–∞–Ω –æ–ª–∏–Ω–¥–∏ ‚Üí water_balance++, bottle_balance++
    - sell_to_client: –ú–∏–∂–æ–∑–≥–∞ —Å–æ—Ç–∏–ª–¥–∏ ‚Üí water_balance--, bottle_balance--
    - return_empty: –ú–∏–∂–æ–∑ –±—û—à —Ç–∞—Äa “õ–∞–π—Ça—Ä–¥–∏ ‚Üí –±–∞–ª–∞–Ω—Å —û–∑–≥–∞—Ä–º–∞–π–¥–∏ (–ª–æ–π–∏“≥–∞ —Å–∏—ë—Å–∞—Ç–∏–≥–∞ –∫—û—Ä–∞)
    - adjustment: “ö—û–ª–¥–∞ —Ç—É–∑–∞—Ç–∏—à
    """
    id = models.BigAutoField(primary_key=True)
    business = models.ForeignKey(Business, on_delete=models.PROTECT)

    sana = models.DateField()
    vaqt = models.TimeField()

    boss_id = models.BigIntegerField()
    boss_name = models.CharField(max_length=55)

    client_tg_id = models.BigIntegerField(blank=True, null=True)
    client_tel_num = models.CharField(max_length=15, blank=True, null=True)

    buyurtma_num = models.BigIntegerField(blank=True, null=True)

    kuryer_id = models.BigIntegerField()
    kuryer_name = models.CharField(max_length=55)

    # üî¢ “≤–∞—Ä–∞–∫–∞—Ç –º–∏“õ–¥–æ—Ä–∏ (–¥–æ–Ω–∞). –ü—É–ª —ç–º–∞—Å!
    income = models.PositiveIntegerField(default=0)   # –∫–∏—Ä–∏–º (–¥–æ–Ω–∞)
    expense = models.PositiveIntegerField(default=0)  # —á–∏“õ–∏–º (–¥–æ–Ω–∞)

    # üîÅ –û–ø–µ—Ä–∞—Ü–∏—è —Ç—É—Ä–∏
    OPERATION = (
        ("in_from_boss", "In from Boss"),
        ("sell_to_client", "Sell to Client"),
        ("return_empty", "Return Empty"),
        ("adjustment", "Adjustment"),
    )
    operation = models.CharField(max_length=20, choices=OPERATION)

    # üìä “ö–æ–ª–¥–∏“õ–ª–∞—Ä (–¥–æ–Ω–∞).
    # water_balance: –∫—É—Ä—å–µ—Ä “õ—û–ª–∏–¥–∞–≥–∏ —Ç—û–ª–∞ —Å—É–≤ –±–∞–∫–ª–∞—Ä —Å–æ–Ω–∏
    # bottle_balance: —Ç—û–ª–∞ –±–∞–∫ ‚Äú—Ç–∞—Äa‚Äù “≥–∏—Å–æ–±–∏–Ω–∏–Ω–≥ “õ–æ–ª–¥–∏“ì–∏ (–ª–æ–π–∏“≥–∞ —Å–∏—ë—Å–∞—Ç–∏–≥–∞ –∫—û—Ä–∞ –±—û—à “õ–∞–π—Ç–≥–∞–Ω–¥–∞ —û–∑–≥–∞—Ä–º–∞–π–¥–∏)
    water_balance = models.PositiveIntegerField(default=0)
    bottle_balance = models.PositiveIntegerField(default=0)

    STATUS = (("ok", "OK"), ("draft", "Draft"), ("void", "Void"))
    status = models.CharField(max_length=10, choices=STATUS, default="ok")

    grated = models.DateTimeField(auto_now_add=True)

    class Meta:
        db_table = "kuryer_water_bottle_balance"
        verbose_name = "–ö—É—Ä–µ—Ä —Å—É–≤ –≤–∞ —Ç–∞—Ä–∞ “≥–∏—Å–æ–±–∏"
        verbose_name_plural = "–ö—É—Ä–µ—Ä —Å—É–≤ –≤–∞ —Ç–∞—Ä–∞ “≥–∏—Å–æ–±–∏"
        indexes = [
            models.Index(fields=["business", "kuryer_id", "sana", "vaqt"], name="idx_kwbb_kur_dt"),
            models.Index(fields=["business", "boss_id"], name="idx_kwbb_boss"),
            models.Index(fields=["business", "operation"], name="idx_kwbb_op"),
        ]

    def __str__(self):
        return f"{self.sana} {self.vaqt} | {self.kuryer_name} | W:{self.water_balance} B:{self.bottle_balance}"

    # ‚úÖ –¢–µ–∫—à–∏—Ä–∏—à: operation ‚Üî income/expense –º–æ—Å–ª–∏–≥–∏
    def clean(self):
        super().clean()
        if self.operation == "in_from_boss":
            if self.income <= 0 or self.expense != 0:
                raise ValidationError("in_from_boss: income>0 –≤–∞ expense=0 –±—û–ª–∏—à–∏ –∫–µ—Ä–∞–∫.")
        elif self.operation == "sell_to_client":
            if self.expense <= 0 or self.income != 0:
                raise ValidationError("sell_to_client: expense>0 –≤–∞ income=0 –±—û–ª–∏—à–∏ –∫–µ—Ä–∞–∫.")
        elif self.operation == "return_empty":
            # –±–∞–ª–∞–Ω—Å —û–∑–≥–∞—Ä–º–∞–π–¥–∏, —à—É–Ω–∏–Ω–≥ —É—á—É–Ω “≥–∞—Ä –∏–∫–∫–∞–ª–∞—Å–∏ “≥–∞–º 0 –±—û–ª–∏—à–∏ –∫–µ—Ä–∞–∫
            if self.income != 0 or self.expense != 0:
                raise ValidationError("return_empty: income=0 –≤–∞ expense=0 –±—û–ª–∏—à–∏ –∫–µ—Ä–∞–∫.")
        elif self.operation == "adjustment":
            # adjustment‚Äô–¥–∞ “≥–∞—Ä –∏–∫–∫–∞–ª–∞—Å–∏ “≥–∞–º 0 –±—û–ª–º–∞—Å–∏–Ω (–∫–∏—á–∏–∫ —Ç—É–∑–∞—Ç–∏—à–≥–∞ —Ä—É“≥—Å–∞—Ç)
            if self.income == 0 and self.expense == 0:
                raise ValidationError("adjustment: income —ë–∫–∏ expense –¥–∞–Ω –∫–∞–º–∏–¥–∞ –±–∏—Ä–∏ > 0 –±—û–ª–∏—à–∏ –∫–µ—Ä–∞–∫.")

    @transaction.atomic
    def save(self, *args, **kwargs):
        """
        –ê–≤—Ç–æ–º–∞—Ç–∏–∫ “õ–æ–ª–¥–∏“õ “≥–∏—Å–æ–±–ª–∞—à:
        - in_from_boss:  +income
        - sell_to_client: -expense
        - return_empty:   0 (–±–∞–ª–∞–Ω—Å —û–∑–≥–∞—Ä–º–∞–π–¥–∏)
        - adjustment:     +income -expense
        """
        is_new = self._state.adding

        if is_new:
            # –æ–ª–¥–∏–Ω–≥–∏ “≥–æ–ª–∞—Ç–Ω–∏ –æ–ª–∞–º–∏–∑ (—à—É –∫—É—Ä—å–µ—Ä + –±–∏–∑–Ω–µ—Å –±—û–π–∏—á–∞)
            last = (
                CourierWaterBottleBalance.objects
                .select_for_update()
                .filter(business=self.business, kuryer_id=self.kuryer_id, status="ok")
                .order_by("-grated")
                .first()
            )
            prev_water = last.water_balance if last else 0
            prev_bottle = last.bottle_balance if last else 0

            delta = 0
            if self.operation == "in_from_boss":
                delta = self.income
            elif self.operation == "sell_to_client":
                delta = -self.expense
            elif self.operation == "return_empty":
                delta = 0
            elif self.operation == "adjustment":
                delta = self.income - self.expense

            # “≤–∞—Ä –∏–∫–∫–∞–ª–∞ –±–∞–ª–∞–Ω—Å –±–∏—Ä —Ö–∏–ª “õ–∞–¥–∞–º –±–∏–ª–∞–Ω —û–∑–≥–∞—Ä–∞–¥–∏
            self.water_balance = max(0, prev_water + delta)
            self.bottle_balance = max(0, prev_bottle + delta)

        super().save(*args, **kwargs)
        

class BossSystemAccount(models.Model):
    """
    –ë–æ—Å—Å (—Ç–∞–¥–±–∏—Ä–∫–æ—Ä) –≤–∞ —Ç–∏–∑–∏–º “≥–∏—Å–æ–±-–∫–∏—Ç–æ–± –∂–∞–¥–≤–∞–ª–∏.
    - income: –ë–æ—Å—Å –æ–Ω–ª–∞–π–Ω —Ç—û–ª–æ–≤ “õ–∏–ª–∏–± –±–∞–ª–∞–Ω—Å–∏–Ω–∏ —Ç—û–ª–¥–∏—Ä–¥–∏
    - expense: –°—É–≤ —Å–æ—Ç–∏–ª–≥–∞–Ω–¥–∞ —Ç–∏–∑–∏–º “≥–∏—Å–æ–±–∏–¥–∞–Ω –µ—á–∏–ª–¥–∏
    """
    id = models.BigAutoField(primary_key=True)
    business = models.ForeignKey(Business, on_delete=models.PROTECT)  # “õ–∞–π—Å–∏ —Ç–∞–¥–±–∏—Ä–∫–æ—Ä

    sana = models.DateField()
    vaqt = models.TimeField()

    # üí∞ –°—É–º–º–∞–ª–∞—Ä
    income = models.DecimalField(max_digits=14, decimal_places=2, default=0)
    expense = models.DecimalField(max_digits=14, decimal_places=2, default=0)
    balance = models.DecimalField(max_digits=14, decimal_places=2, default=0)

    OPERATION = (
        ("income", "Income (Top-up)"),
        ("expense", "Expense (Water Sale)"),
        ("promo", "Promo/Free"),  # –∞–∫—Ü–∏—è —ë–∫–∏ —Ä–µ–∫–ª–∞–º–∞–¥–∞–Ω
    )
    operation = models.CharField(max_length=10, choices=OPERATION)

    # –ò–∑–æ“≥ / –ª–æ–≥
    note = models.CharField(max_length=255, blank=True, null=True)

    grated = models.DateTimeField(auto_now_add=True)

    class Meta:
        db_table = "boss_system_account"
        verbose_name = "–¢–∏–∑–∏–º “≥–∏—Å–æ–±–∏"
        verbose_name_plural = "–¢–∏–∑–∏–º “≥–∏—Å–æ–±–∏"
        indexes = [
            models.Index(fields=["business", "sana"], name="idx_bsa_biz_sana"),
            models.Index(fields=["business", "operation"], name="idx_bsa_biz_op"),
        ]

    def __str__(self):
        return f"{self.sana} {self.vaqt} | {self.business.name} | Balance: {self.balance}"

    def clean(self):
        super().clean()
        if self.operation == "income":
            if self.income <= 0 or self.expense != 0:
                raise ValidationError("Income —É—á—É–Ω income>0 –≤–∞ expense=0 –±—û–ª–∏—à–∏ –∫–µ—Ä–∞–∫.")
        elif self.operation == "expense":
            if self.expense <= 0 or self.income != 0:
                raise ValidationError("Expense —É—á—É–Ω expense>0 –≤–∞ income=0 –±—û–ª–∏—à–∏ –∫–µ—Ä–∞–∫.")
        elif self.operation == "promo":
            if self.income != 0 or self.expense != 0:
                raise ValidationError("Promo –æ–ø–µ—Ä–∞—Ü–∏—è—Å–∏–¥–∞ income=0 –≤–∞ expense=0 –±—û–ª–∏—à–∏ –∫–µ—Ä–∞–∫.")

    def save(self, *args, **kwargs):
        # –û–ª–¥–∏–Ω–≥–∏ –±–∞–ª–∞–Ω—Å–Ω–∏ –æ–ª–∏–±, —è–Ω–≥–∏–ª–∞–π–º–∏–∑
        last = (
            BossSystemAccount.objects
            .filter(business=self.business)
            .order_by("-grated")
            .first()
        )
        prev_balance = last.balance if last else 0

        if self.operation == "income":
            self.balance = prev_balance + self.income
            self.note = self.note or "–ë–æ—Å—Å –±–∞–ª–∞–Ω—Å–∏–Ω–∏ –æ–Ω–ª–∞–π–Ω —Ç—û–ª–¥–∏—Ä–¥–∏"
        elif self.operation == "expense":
            self.balance = prev_balance - self.expense
            self.note = self.note or "–°—É–≤ —Å–æ—Ç–∏–ª–¥–∏, “≥–∏—Å–æ–±–¥–∞–Ω –µ—á–∏–ª–¥–∏"
        elif self.operation == "promo":
            self.balance = prev_balance
            self.note = self.note or "–ê–∫—Ü–∏—è/—Ä–µ–∫–ª–∞–º–∞ ‚Äî —Ö–∞“õ –æ–ª–∏–Ω–º–∞–¥–∏"

        super().save(*args, **kwargs)



class WaterPricePlan(models.Model):
    business   = models.ForeignKey(Business, on_delete=models.PROTECT, related_name="price_plans")
    name       = models.CharField(max_length=60, default="–ê—Å–æ—Å–∏–π –Ω–∞—Ä—Ö")
    period     = models.CharField(
        max_length=8,
        choices=(("month", "–û–π"), ("year", "–ô–∏–ª")),
        default="month"
    )
    currency   = models.CharField(max_length=8, default="UZS")
    is_active  = models.BooleanField(default=True)
    start_date = models.DateField(null=True, blank=True)   # –∞–∫—Ü–∏—è –±–æ—à–ª–∞–Ω–∏—à–∏
    end_date   = models.DateField(null=True, blank=True)   # –∞–∫—Ü–∏—è —Ç—É–≥–∞—à–∏
    created_at = models.DateTimeField(auto_now_add=True)

    class Meta:
        db_table = "water_price_plan"
        verbose_name = "–°—É–≤ –Ω–∞—Ä—Ö —Ä–µ–∂–∞—Å–∏"
        verbose_name_plural = "–°—É–≤ –Ω–∞—Ä—Ö —Ä–µ–∂–∞–ª–∞—Ä–∏"
        indexes = [
            models.Index(fields=["business", "is_active"]),
            models.Index(fields=["business", "period"]),
        ]

    def __str__(self):
        return f"{self.business} ‚Äî {self.name}"


class WaterPriceTier(models.Model):
    plan       = models.ForeignKey(WaterPricePlan, on_delete=models.CASCADE, related_name="tiers")
    min_qty    = models.PositiveIntegerField(default=0)
    max_qty    = models.PositiveIntegerField(null=True, blank=True)  # None ‚Üí ‚àû
    unit_price = models.DecimalField(max_digits=12, decimal_places=2)  # —Å—û–º
    priority   = models.PositiveSmallIntegerField(default=100)
    is_active  = models.BooleanField(default=True)
    created_at = models.DateTimeField(auto_now_add=True)

    class Meta:
        db_table = "water_price_tier"
        verbose_name = "–°—É–≤ –Ω–∞—Ä—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–∏"
        verbose_name_plural = "–°—É–≤ –Ω–∞—Ä—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–ª–∞—Ä–∏"
        ordering = ["priority", "min_qty"]
        constraints = [
            models.CheckConstraint(
                check=models.Q(max_qty__isnull=True) | models.Q(max_qty__gte=models.F("min_qty")),
                name="tier_min_lte_max",
            )
        ]
        indexes = [
            models.Index(fields=["plan", "is_active"]),
            models.Index(fields=["plan", "min_qty", "max_qty"]),
        ]

    def __str__(self):
        hi = self.max_qty if self.max_qty is not None else "‚àû"
        return f"{self.plan.name}: {self.min_qty}‚Äì{hi} –¥–æ–Ω–∞ ‚Üí {self.unit_price} {self.plan.currency}"
