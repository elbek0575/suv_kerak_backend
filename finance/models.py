from django.db import models, transaction
from django.core.exceptions import ValidationError
from accounts.models import Business  # —Ç–µ–Ω–∞–Ω—Ç
from django.utils import timezone

class CashMenedjer(models.Model):
    business = models.ForeignKey(Business, on_delete=models.PROTECT, null=True, blank=True)

    sana = models.DateField()
    vaqt = models.TimeField()

    # üîÅ “õ–∞–π—Ç–∞ –Ω–æ–º–ª–∞–Ω–≥–∞–Ω —É—Å—Ç—É–Ω–ª–∞—Ä
    menedjer_id   = models.BigIntegerField()
    menedjer_name = models.CharField(max_length=55)

    client_tg_id   = models.BigIntegerField(blank=True, null=True)
    client_tel_num = models.CharField(max_length=15, blank=True, null=True)

    buyurtma_num = models.BigIntegerField(blank=True, null=True)
    kuryer_id    = models.BigIntegerField()
    kuryer_name  = models.CharField(max_length=55)

    income  = models.DecimalField(max_digits=14, decimal_places=2, default=0)
    expense = models.DecimalField(max_digits=14, decimal_places=2, default=0)
    balance = models.DecimalField(max_digits=14, decimal_places=2, default=0)

    # —Å–∫—Ä–∏–Ω–¥–∞: status (text), cash_operation (text)
    status         = models.TextField(blank=True, null=True)
    cash_operation = models.TextField()  # ('income' | 'expense' —ë–∫–∏ –º–∞—Ç–Ω)

    cash_message = models.CharField(max_length=255, blank=True)
    grated       = models.DateTimeField(auto_now_add=True)

    class Meta:
        db_table = "cash_menedjer"
        verbose_name = "Menedjer kassa"
        verbose_name_plural = "Menedjer kassa yoz—É–≤–ª–∞—Ä–∏"
        indexes = [
            models.Index(fields=["business", "menedjer_id"], name="idx_cash_menedjer_mgr"),
            models.Index(fields=["business", "kuryer_id"],   name="idx_cash_menedjer_kur"),
        ]

    def save(self, *args, **kwargs):
        # –ê–≤—Ç–æ–º–∞—Ç–∏–∫ —Ö–∞–±–∞—Ä (—Ö–æ“≥–ª–∞—Å–∞–Ω–≥–∏–∑ –º–∞—Ç–Ω–Ω–∏ —û–∑–≥–∞—Ä—Ç–∏—Ä–∏—à–∏–Ω–≥–∏–∑ –º—É–º–∫–∏–Ω)
        if (self.cash_operation or "").lower() == "income":
            self.cash_message = f"–ö—É—Ä—å–µ—Ä {self.kuryer_name} –¥–∞–Ω –∫–∏—Ä–∏–º –±—û–ª–¥–∏"
        elif (self.cash_operation or "").lower() == "expense":
            self.cash_message = "–ù–∞“õ–¥ –ø—É–ª —Ç–æ–ø—à–∏—Ä–∏–ª–¥–∏"
        super().save(*args, **kwargs)


class CashState(models.Model):
    """–ë–æ—Å—Å —Ç–∞—Å–¥–∏“ì–∏–¥–∞–Ω –æ–ª–¥–∏–Ω–≥–∏ “≥–æ–ª–∞—Ç–ª–∞—Ä (—ç–Ω–¥–∏: –º–µ–Ω–µ–∂–µ—Ä)."""
    business = models.ForeignKey(Business, on_delete=models.PROTECT)
    sana = models.DateField()
    vaqt = models.TimeField()

    # üü° “õ–∞–π—Ç–∞ –Ω–æ–º–ª–∞–Ω–≥–∞–Ω —É—Å—Ç—É–Ω–ª–∞—Ä
    menedjer_id   = models.BigIntegerField()                 # old: boss_id
    menedjer_name = models.CharField(max_length=55)          # old: boss_name

    kuryer_id = models.BigIntegerField()
    kuryer_name = models.CharField(max_length=55)

    income  = models.DecimalField(max_digits=14, decimal_places=2, default=0)
    expense = models.DecimalField(max_digits=14, decimal_places=2, default=0)
    balance = models.DecimalField(
        max_digits=14, decimal_places=2, default=0,
        help_text="–¢–∞—Å–¥–∏“õ –ø–∞–π—Ç–∏–¥–∞ “≥–∏—Å–æ–±–ª–∞–Ω–∞–¥–∏"
    )

    OPERATION = (("income", "Income"), ("expense", "Expense"))
    cash_operation = models.CharField(max_length=10, choices=OPERATION)

    STATUS = (("pending", "Pending"), ("approved", "Approved"), ("rejected", "Rejected"))
    status = models.CharField(max_length=10, choices=STATUS, default="pending")

    tasdiq_vaqti = models.DateTimeField(blank=True, null=True)
    rad_vaqti    = models.DateTimeField(blank=True, null=True)

    # —Ç–∞—Å–¥–∏“õ–ª–∞–Ω–≥–∞–Ω–¥–∞ —è—Ä–∞—Ç–∏–ª–≥–∞–Ω CashMenedjer —ë–∑—É–≤–∏–≥–∞ —Å—Å–∏–ª–∫–∞
    cash_boss = models.OneToOneField(  # –Ω–æ–º–∏–Ω–∏ “≥–æ–∑–∏—Ä—á–∞ —û–∑–≥–∞—Ä—Ç–∏—Ä–º–∞–π “õ–æ–ª–¥–∏—Ä–¥–∏–∫
        CashMenedjer, on_delete=models.SET_NULL,
        null=True, blank=True, related_name="source_state"
    )

    grated = models.DateTimeField(auto_now_add=True)

    class Meta:
        db_table = "cash_state"
        verbose_name = "–ö–∞—Å—Å–∞ “≥–æ–ª–∞—Ç–∏"
        verbose_name_plural = "–ö–∞—Å—Å–∞ “≥–æ–ª–∞—Ç–∏"
        indexes = [
            models.Index(fields=["business", "menedjer_id", "status"]),  # old: boss_id
            models.Index(fields=["business", "kuryer_id", "status"]),
        ]

    def clean(self):
        if self.cash_operation == "income":
            if self.income <= 0 or self.expense != 0:
                raise ValidationError("Income —É—á—É–Ω income>0 –≤–∞ expense=0 –±—û–ª–∏—à–∏ –∫–µ—Ä–∞–∫.")
        if self.cash_operation == "expense":
            if self.expense <= 0 or self.income != 0:
                raise ValidationError("Expense —É—á—É–Ω expense>0 –≤–∞ income=0 –±—û–ª–∏—à–∏ –∫–µ—Ä–∞–∫.")

    @transaction.atomic
    def approve(self, now_dt):
        """–ú–µ–Ω–µ–∂–µ—Ä —Ç–∞—Å–¥–∏“õ–ª–∞–≥–∞–Ω–¥–∞ CashMenedjer‚Äô–≥–∞ —û—Ç–∫–∞–∑–∏—à –≤–∞ –±–∞–ª–∞–Ω—Å–Ω–∏ —è–Ω–≥–∏–ª–∞—à."""
        if self.status != "pending":
            return self.cash_boss  # –æ–ª–¥–∏–Ω –∏—à–ª–∞–Ω–≥–∞–Ω

        # –æ–ª–¥–∏–Ω–≥–∏ –±–∞–ª–∞–Ω—Å (—ç–Ω–¥–∏ CashMenedjer –±—û–π–∏—á–∞)
        last = (
            CashMenedjer.objects
            .filter(business=self.business, menedjer_id=self.menedjer_id)
            .order_by("-grated")
            .first()
        )
        prev_balance = last.balance if last else 0
        new_balance = prev_balance + (self.income or 0) - (self.expense or 0)

        boss = CashMenedjer.objects.create(
            business=self.business,
            sana=self.sana,
            vaqt=self.vaqt,
            menedjer_id=self.menedjer_id,
            menedjer_name=self.menedjer_name,
            kuryer_id=self.kuryer_id,
            kuryer_name=self.kuryer_name,
            income=self.income,
            expense=self.expense,
            balance=new_balance,
            cash_operation=self.cash_operation,
        )

        self.cash_boss  = boss
        self.balance    = new_balance
        self.status     = "approved"
        self.tasdiq_vaqti = now_dt
        self.save(update_fields=["cash_boss", "balance", "status", "tasdiq_vaqti"])
        return boss

    def reject(self, now_dt):
        """–ú–µ–Ω–µ–∂–µ—Ä —Ä–∞–¥ —ç—Ç—Å–∞ ‚Äî CashMenedjer‚Äô–≥–∞ —û—Ç–º–∞–π–¥–∏."""
        if self.status == "pending":
            self.status = "rejected"
            self.rad_vaqti = now_dt
            self.save(update_fields=["status", "rad_vaqti"])



class CashKuryer(models.Model):
    """–ö—É—Ä—å–µ—Ä –∫–∞—Å—Å–∞—Å–∏."""
    business = models.ForeignKey(Business, on_delete=models.PROTECT, null=True, blank=True)

    id   = models.BigAutoField(primary_key=True)
    sana = models.DateField()
    vaqt = models.TimeField()

    # üü° –ú–µ–Ω–µ–∂–µ—Ä–≥–∞ —û—Ç–∫–∞–∑–∏–ª–¥–∏
    menedjer_id   = models.BigIntegerField()
    menedjer_name = models.CharField(max_length=55)

    client_tg_id   = models.BigIntegerField(blank=True, null=True)
    client_tel_num = models.CharField(max_length=15, blank=True, null=True)

    buyurtma_num = models.BigIntegerField(blank=True, null=True)
    kuryer_id    = models.BigIntegerField()
    kuryer_name  = models.CharField(max_length=55)

    # üí∞ –°—É–º–º–∞–ª–∞—Ä
    income  = models.DecimalField(max_digits=14, decimal_places=2, default=0)
    expense = models.DecimalField(max_digits=14, decimal_places=2, default=0)
    balance = models.DecimalField(max_digits=14, decimal_places=2, default=0)

    # üîÅ –°–∫—Ä–∏–Ω–¥–∞ ‚Äî text
    cash_operation = models.TextField()  # 'income' | 'expense' (–º–∞—Ç–Ω)
    status         = models.TextField(blank=True, null=True)  # 'buffer' | 'approved' | 'rejected'

    grated = models.DateTimeField(auto_now_add=True)

    class Meta:
        db_table = "cash_kuryer"
        verbose_name = "–ö—É—Ä–µ—Ä –∫–∞—Å—Å–∞ “≥–∏—Å–æ–±–∏"
        verbose_name_plural = "–ö—É—Ä–µ—Ä –∫–∞—Å—Å–∞ “≥–∏—Å–æ–±–∏"
        indexes = [
            models.Index(fields=["business", "menedjer_id"], name="idx_ck_mgr"),
            models.Index(fields=["business", "kuryer_id"],   name="idx_ck_kuryer"),
            models.Index(fields=["client_tel_num"],          name="idx_ck_client_tel"),
            models.Index(fields=["buyurtma_num"],            name="idx_ck_buyurtma"),
            models.Index(fields=["status"],                  name="idx_ck_status"),
        ]

    def __str__(self):
        return f"{self.sana} {self.vaqt} | Kuryer: {self.kuryer_name} | Balance: {self.balance}"

    # ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è (–º–∞—Ç–Ω–≥–∞ “õ–∞—Ä–∞–º–∞–π “≥–æ–∑–∏—Ä—á–∞ —à—É “õ–æ–∏–¥–∞)
    def clean(self):
        op = (self.cash_operation or "").lower()
        if op == "income":
            if self.income <= 0 or self.expense != 0:
                raise ValidationError("Income –æ–ø–µ—Ä–∞—Ü–∏—è—Å–∏–¥–∞ income>0 –≤–∞ expense=0 –±—û–ª–∏—à–∏ –∫–µ—Ä–∞–∫.")
        elif op == "expense":
            if self.expense <= 0 or self.income != 0:
                raise ValidationError("Expense –æ–ø–µ—Ä–∞—Ü–∏—è—Å–∏–¥–∞ expense>0 –≤–∞ income=0 –±—û–ª–∏—à–∏ –∫–µ—Ä–∞–∫.")
            
class CourierWaterBottleBalance(models.Model):
    """
    –ö—É—Ä—å–µ—Ä —Ç—û–ª–∞ —Å—É–≤ (19L –±–∞–∫) “≥–∞—Ä–∞–∫–∞—Ç–ª–∞—Ä–∏ –≤–∞ “õ–æ–ª–¥–∏“õ–ª–∞—Ä–∏ –∂—É—Ä–Ω–∞–ª–∏.
    - in_from_boss: –ë–æ—Å—Å–¥–∞–Ω –æ–ª–∏–Ω–¥–∏ ‚Üí water_balance++, bottle_balance++
    - sell_to_client: –ú–∏–∂–æ–∑–≥–∞ —Å–æ—Ç–∏–ª–¥–∏ ‚Üí water_balance--, bottle_balance--
    - return_empty: –ú–∏–∂–æ–∑ –±—û—à —Ç–∞—Äa “õ–∞–π—Ça—Ä–¥–∏ ‚Üí –±–∞–ª–∞–Ω—Å —û–∑–≥–∞—Ä–º–∞–π–¥–∏ (–ª–æ–π–∏“≥–∞ —Å–∏—ë—Å–∞—Ç–∏–≥–∞ –∫—û—Ä–∞)
    - adjustment: “ö—û–ª–¥–∞ —Ç—É–∑–∞—Ç–∏—à
    """
    id = models.BigAutoField(primary_key=True)
    business = models.ForeignKey(Business, on_delete=models.PROTECT)

    sana = models.DateField()
    vaqt = models.TimeField()

    # üü° “õ–∞–π—Ç–∞ –Ω–æ–º–ª–∞–Ω–≥–∞–Ω —É—Å—Ç—É–Ω–ª–∞—Ä
    menedjer_id   = models.BigIntegerField()            # old: boss_id
    menedjer_name = models.CharField(max_length=55)     # old: boss_name

    client_tg_id = models.BigIntegerField(blank=True, null=True)
    client_tel_num = models.CharField(max_length=15, blank=True, null=True)

    buyurtma_num = models.BigIntegerField(blank=True, null=True)

    kuryer_id = models.BigIntegerField()
    kuryer_name = models.CharField(max_length=55)

    # üî¢ “≤–∞—Ä–∞–∫–∞—Ç –º–∏“õ–¥–æ—Ä–∏ (–¥–æ–Ω–∞). –ü—É–ª —ç–º–∞—Å!
    income = models.PositiveIntegerField(default=0)   # –∫–∏—Ä–∏–º (–¥–æ–Ω–∞)
    expense = models.PositiveIntegerField(default=0)  # —á–∏“õ–∏–º (–¥–æ–Ω–∞)

    # üîÅ –û–ø–µ—Ä–∞—Ü–∏—è —Ç—É—Ä–∏
    OPERATION = (
        ("in_from_boss", "In from Boss"),
        ("sell_to_client", "Sell to Client"),
        ("return_empty", "Return Empty"),
        ("adjustment", "Adjustment"),
    )
    operation = models.CharField(max_length=20, choices=OPERATION)

    # üìä “ö–æ–ª–¥–∏“õ–ª–∞—Ä (–¥–æ–Ω–∞).
    # water_balance: –∫—É—Ä—å–µ—Ä “õ—û–ª–∏–¥–∞–≥–∏ —Ç—û–ª–∞ —Å—É–≤ –±–∞–∫–ª–∞—Ä —Å–æ–Ω–∏
    # bottle_balance: —Ç—û–ª–∞ –±–∞–∫ ‚Äú—Ç–∞—Äa‚Äù “≥–∏—Å–æ–±–∏–Ω–∏–Ω–≥ “õ–æ–ª–¥–∏“ì–∏ (–ª–æ–π–∏“≥–∞ —Å–∏—ë—Å–∞—Ç–∏–≥–∞ –∫—û—Ä–∞ –±—û—à “õ–∞–π—Ç–≥–∞–Ω–¥–∞ —û–∑–≥–∞—Ä–º–∞–π–¥–∏)
    water_balance = models.PositiveIntegerField(default=0)
    bottle_balance = models.PositiveIntegerField(default=0)

    STATUS = (("ok", "OK"), ("draft", "Draft"), ("void", "Void"))
    status = models.CharField(max_length=10, choices=STATUS, default="ok")

    grated = models.DateTimeField(auto_now_add=True)

    class Meta:
        db_table = "kuryer_water_bottle_balance"
        verbose_name = "–ö—É—Ä–µ—Ä —Å—É–≤ –≤–∞ —Ç–∞—Ä–∞ “≥–∏—Å–æ–±–∏"
        verbose_name_plural = "–ö—É—Ä–µ—Ä —Å—É–≤ –≤–∞ —Ç–∞—Ä–∞ “≥–∏—Å–æ–±–∏"
        indexes = [
            models.Index(fields=["business", "kuryer_id", "sana", "vaqt"], name="idx_kwbb_kur_dt"),
            models.Index(fields=["business", "menedjer_id"], name="idx_kwbb_menedjer"),  # old: boss_id
            models.Index(fields=["business", "operation"], name="idx_kwbb_op"),
        ]

    def __str__(self):
        return f"{self.sana} {self.vaqt} | {self.kuryer_name} | W:{self.water_balance} B:{self.bottle_balance}"

    # ‚úÖ –¢–µ–∫—à–∏—Ä–∏—à: operation ‚Üî income/expense –º–æ—Å–ª–∏–≥–∏
    def clean(self):
        super().clean()
        if self.operation == "in_from_boss":
            if self.income <= 0 or self.expense != 0:
                raise ValidationError("in_from_boss: income>0 –≤–∞ expense=0 –±—û–ª–∏—à–∏ –∫–µ—Ä–∞–∫.")
        elif self.operation == "sell_to_client":
            if self.expense <= 0 or self.income != 0:
                raise ValidationError("sell_to_client: expense>0 –≤–∞ income=0 –±—û–ª–∏—à–∏ –∫–µ—Ä–∞–∫.")
        elif self.operation == "return_empty":
            # –±–∞–ª–∞–Ω—Å —û–∑–≥–∞—Ä–º–∞–π–¥–∏, —à—É–Ω–∏–Ω–≥ —É—á—É–Ω “≥–∞—Ä –∏–∫–∫–∞–ª–∞—Å–∏ “≥–∞–º 0 –±—û–ª–∏—à–∏ –∫–µ—Ä–∞–∫
            if self.income != 0 or self.expense != 0:
                raise ValidationError("return_empty: income=0 –≤–∞ expense=0 –±—û–ª–∏—à–∏ –∫–µ—Ä–∞–∫.")
        elif self.operation == "adjustment":
            # adjustment‚Äô–¥–∞ “≥–∞—Ä –∏–∫–∫–∞–ª–∞—Å–∏ “≥–∞–º 0 –±—û–ª–º–∞—Å–∏–Ω (–∫–∏—á–∏–∫ —Ç—É–∑–∞—Ç–∏—à–≥–∞ —Ä—É“≥—Å–∞—Ç)
            if self.income == 0 and self.expense == 0:
                raise ValidationError("adjustment: income —ë–∫–∏ expense –¥–∞–Ω –∫–∞–º–∏–¥–∞ –±–∏—Ä–∏ > 0 –±—û–ª–∏—à–∏ –∫–µ—Ä–∞–∫.")

    @transaction.atomic
    def save(self, *args, **kwargs):
        """
        –ê–≤—Ç–æ–º–∞—Ç–∏–∫ “õ–æ–ª–¥–∏“õ “≥–∏—Å–æ–±–ª–∞—à:
        - in_from_boss:  +income
        - sell_to_client: -expense
        - return_empty:   0 (–±–∞–ª–∞–Ω—Å —û–∑–≥–∞—Ä–º–∞–π–¥–∏)
        - adjustment:     +income -expense
        """
        is_new = self._state.adding

        if is_new:
            # –æ–ª–¥–∏–Ω–≥–∏ “≥–æ–ª–∞—Ç–Ω–∏ –æ–ª–∞–º–∏–∑ (—à—É –∫—É—Ä—å–µ—Ä + –±–∏–∑–Ω–µ—Å –±—û–π–∏—á–∞)
            last = (
                CourierWaterBottleBalance.objects
                .select_for_update()
                .filter(business=self.business, kuryer_id=self.kuryer_id, status="ok")
                .order_by("-grated")
                .first()
            )
            prev_water = last.water_balance if last else 0
            prev_bottle = last.bottle_balance if last else 0

            delta = 0
            if self.operation == "in_from_boss":
                delta = self.income
            elif self.operation == "sell_to_client":
                delta = -self.expense
            elif self.operation == "return_empty":
                delta = 0
            elif self.operation == "adjustment":
                delta = self.income - self.expense

            # “≤–∞—Ä –∏–∫–∫–∞–ª–∞ –±–∞–ª–∞–Ω—Å –±–∏—Ä —Ö–∏–ª “õ–∞–¥–∞–º –±–∏–ª–∞–Ω —û–∑–≥–∞—Ä–∞–¥–∏
            self.water_balance = max(0, prev_water + delta)
            self.bottle_balance = max(0, prev_bottle + delta)

        super().save(*args, **kwargs)
        

class BusinessSystemAccount(models.Model):
    """
    –ë–æ—Å—Å (—Ç–∞–¥–±–∏—Ä–∫–æ—Ä) –≤–∞ —Ç–∏–∑–∏–º “≥–∏—Å–æ–±-–∫–∏—Ç–æ–± –∂–∞–¥–≤–∞–ª–∏.
    - income: –ë–æ—Å—Å –æ–Ω–ª–∞–π–Ω —Ç—û–ª–æ–≤ “õ–∏–ª–∏–± –±–∞–ª–∞–Ω—Å–∏–Ω–∏ —Ç—û–ª–¥–∏—Ä–¥–∏
    - expense: –°—É–≤ —Å–æ—Ç–∏–ª–≥–∞–Ω–¥–∞ —Ç–∏–∑–∏–º “≥–∏—Å–æ–±–∏–¥–∞–Ω –µ—á–∏–ª–¥–∏
    """
    from django.db import models
from django.core.exceptions import ValidationError
from accounts.models import Business

class BusinessSystemAccount(models.Model):
    """–¢–∏–∑–∏–º “≥–∏—Å–æ–±–∏ (—Å–∫—Ä–∏–Ω–≥–∞ –º–æ—Å)."""
    id = models.BigAutoField(primary_key=True)
    business = models.ForeignKey(Business, on_delete=models.PROTECT)

    sana = models.DateField()
    vaqt = models.TimeField()

    # üü° —Å–∫—Ä–∏–Ω–¥–∞–≥–∏ —Å–∞—Ä–∏–∫ —É—Å—Ç—É–Ω–ª–∞—Ä
    menedjer_id   = models.BigIntegerField(blank=True, null=True)
    menedjer_name = models.CharField(max_length=55, blank=True, null=True)

    client_tg_id  = models.BigIntegerField(blank=True, null=True)
    buyurtma_num  = models.BigIntegerField(blank=True, null=True)

    kuryer_id   = models.BigIntegerField(blank=True, null=True)   # <-- null=True
    kuryer_name = models.CharField(max_length=55, blank=True, null=True)

    tulov_tizimi = models.TextField(blank=True, null=True)

    income  = models.DecimalField(max_digits=14, decimal_places=2, default=0)
    expense = models.DecimalField(max_digits=14, decimal_places=2, default=0)
    tizimdagi_balance = models.DecimalField(max_digits=14, decimal_places=2, default=0)

    status    = models.TextField(blank=True, null=True)
    operation = models.TextField()

    grated = models.DateTimeField(auto_now_add=True)

    class Meta:
        db_table = "business_system_account"
        verbose_name = "–ë–∏–∑–Ω–µ—Å —Ç–∏–∑–∏–º “≥–∏—Å–æ–±–∏"
        verbose_name_plural = "–ë–∏–∑–Ω–µ—Å —Ç–∏–∑–∏–º “≥–∏—Å–æ–±–∏"
        indexes = [
            models.Index(fields=["business", "sana"],        name="idx_bsa_biz_sana"),
            models.Index(fields=["business", "menedjer_id"], name="idx_bsa_mgr"),
            models.Index(fields=["business", "kuryer_id"],   name="idx_bsa_kur"),
            models.Index(fields=["business", "operation"],   name="idx_bsa_op"),
            models.Index(fields=["business", "status"],      name="idx_bsa_status"),
        ]

    def __str__(self):
        return f"{self.sana} {self.vaqt} | {self.business.name} | Bal: {self.tizimdagi_balance}"

    def clean(self):
        op = (self.operation or "").lower()
        if op == "income":
            if self.income <= 0 or self.expense != 0:
                raise ValidationError("Income —É—á—É–Ω income>0 –≤–∞ expense=0 –±—û–ª—Å–∏–Ω.")
        elif op == "expense":
            if self.expense <= 0 or self.income != 0:
                raise ValidationError("Expense —É—á—É–Ω expense>0 –≤–∞ income=0 –±—û–ª—Å–∏–Ω.")
        # promo/–±–æ—à“õ–∞–ª–∞—Ä–≥–∞ “õ–æ–∏–¥–∞ “õ—û–π–º–∞—Å–∞–∫ “≥–∞–º –±—û–ª–∞–¥–∏

    def save(self, *args, **kwargs):
        # –±–∏—Ä –±–∏–∑–Ω–µ—Å –±—û–π–∏—á–∞ –æ—Ö–∏—Ä–≥–∏ –±–∞–ª–∞–Ω—Å–Ω–∏ —Ç–æ–ø–∏–±, —è–Ω–≥–∏–ª–∞–π–º–∏–∑
        last = (
            BusinessSystemAccount.objects
            .filter(business=self.business)
            .order_by("-grated")
            .first()
        )
        prev = last.tizimdagi_balance if last else 0

        op = (self.operation or "").lower()
        if op == "income":
            self.tizimdagi_balance = prev + self.income
        elif op == "expense":
            self.tizimdagi_balance = prev - self.expense
        else:
            self.tizimdagi_balance = prev  # promo/–±–æ—à“õ–∞ —Ç—É—Ä–ª–∞—Ä

        super().save(*args, **kwargs)
        
class Transaction(models.Model):
    class Status(models.TextChoices):
        PENDING   = "pending",   "pending"
        SUCCESS   = "success",   "success"
        FAILED    = "failed",    "failed"
        CANCELED  = "canceled",  "canceled"

    # id: serial4
    id = models.AutoField(primary_key=True)

    # transaction_id: varchar(50)
    transaction_id = models.CharField(max_length=50, db_index=True)

    # order_id: varchar(50)
    order_id = models.CharField(max_length=50, db_index=True)

    # amount: numeric(12,2)
    amount = models.DecimalField(max_digits=12, decimal_places=2)

    # status: varchar(20)
    status = models.CharField(
        max_length=20,
        choices=Status.choices,
        default=Status.PENDING,
        db_index=True,
    )

    # created_at: timestamptz
    created_at = models.DateTimeField(default=timezone.now, db_index=True)

    # updated_at: timestamptz
    updated_at = models.DateTimeField(auto_now=True)

    # cancel_time: timestamptz
    cancel_time = models.DateTimeField(null=True, blank=True)

    # reason: int4 (–º–∞—Å–∞–ª–∞–Ω, –±–µ–∫–æ—Ä “õ–∏–ª–∏—à —Å–∞–±–∞–± –∫–æ–¥–∏)
    reason = models.IntegerField(null=True, blank=True)

    # id_tg_client: int8
    id_tg_client = models.BigIntegerField(null=True, blank=True)

    # tel_num_client: varchar(45)
    tel_num_client = models.CharField(max_length=45, null=True, blank=True)

    class Meta:
        db_table = "transactions"
        indexes = [
            models.Index(fields=["transaction_id"]),
            models.Index(fields=["order_id"]),
            models.Index(fields=["status"]),
            models.Index(fields=["created_at"]),
        ]

    def __str__(self):
        return f"{self.transaction_id} | {self.order_id} | {self.status} | {self.amount}"