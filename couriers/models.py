from django.db import models
from django.core.exceptions import ValidationError

from django.db import models
from django.core.exceptions import ValidationError
from accounts.models import Business   # üîó –ë–∏–∑–Ω–µ—Å –º–æ–¥–µ–ª–∏–Ω–∏ –∏–º–ø–æ—Ä—Ç “õ–∏–ª–∞–º–∏–∑

class Kuryer(models.Model):
    id = models.BigAutoField(primary_key=True)        # bigserial
    sana = models.DateField()                         # date
    kuryer_id = models.BigIntegerField(unique=True)   # int8, —É–Ω–∏–∫–∞–ª
    kuryer_name = models.CharField(max_length=55)     # varchar(55)

    avto_num = models.TextField(blank=True, null=True)    # –∞–≤—Ç–æ —Ä–∞“õ–∞–º
    avto_marka = models.TextField(blank=True, null=True)  # –∞–≤—Ç–æ –º–∞—Ä–∫–∞
    tel_num = models.CharField(max_length=20, unique=True)  # —Ç–µ–ª–µ—Ñ–æ–Ω —Ä–∞“õ–∞–º–∏

    password = models.CharField(max_length=128, blank=True, null=True)  # –ø–∞—Ä–æ–ª (hashed –±—û–ª–∏—à–∏ –∫–µ—Ä–∞–∫)
    pin_code = models.CharField(max_length=8, blank=True, null=True)    # –ø–∏–Ω –∫–æ–¥

    grated = models.DateTimeField(auto_now_add=True)  # timestamp

    # üü° –¢–∏–ª
    lang = models.TextField(blank=True, null=True)    # 'uz' | 'ru' | 'en'

    # üÜï –ö—É—Ä–µ—Ä —Ö–∏–∑–º–∞—Ç –Ω–∞—Ä—Ö–∏ “õ–æ–∏–¥–∞–ª–∞—Ä–∏ (–¥–∏–∞–ø–∞–∑–æ–Ω–ª–∏ —Ç–∞—Ä–∏—Ñ–ª–∞—Ä) ‚Äî JSON
    # –§–æ—Ä–º–∞—Ç (–º–∞—Å–ª–∞“≥–∞—Ç): [{"period":"month","min":0,"max":5000,"price":2000,"currency":"UZS"}, ...]
    service_price_rules = models.JSONField(default=list, blank=True)

    # üÜï –°–∞—Ä–∏–∫ —É—Å—Ç—É–Ω–ª–∞—Ä
    yil_bosh_sotil_suv_soni = models.PositiveIntegerField(default=0)  # –π–∏–ª –±–æ—à–∏–≥–∞—á–∞ –∂–∞–º–∏ —Å–æ—Ç–∏–ª–≥–∞–Ω —Å—É–≤ (–¥–æ–Ω–∞)
    oy_bosh_sotil_suv_soni  = models.PositiveIntegerField(default=0)  # –æ–π –±–æ—à–∏–≥–∞—á–∞ –∂–∞–º–∏ —Å–æ—Ç–∏–ª–≥–∞–Ω —Å—É–≤ (–¥–æ–Ω–∞)

    # –ù–∞—Ä—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–ª–∞—Ä–∏ “õ—û–ª–ª–∞–Ω–∞–¥–∏–≥–∞–Ω –¥–∞–≤—Ä: 'month' | 'year'
    DIAP_DAVR_CHOICES = (("month", "month"), ("year", "year"))
    narxlar_diap_davri = models.CharField(max_length=8, choices=DIAP_DAVR_CHOICES, default="month")

    # üîó –ë–û–°–° –ë–ò–ó–ù–ï–°–ò–ì–ê –ë–û“í–õ–ê–® ‚Äî FK (–±–∏—Ä –±–∏–∑–Ω–µ—Å–≥–∞ –∫—û–ø –∫—É—Ä—å–µ—Ä)
    business = models.ForeignKey(
        Business,
        on_delete=models.PROTECT,      # –±–∏–∑–Ω–µ—Å —û—á–∏—Ä–∏–ª–º–∞—Å–∏–Ω; –∞–≤–≤–∞–ª –∞–∂—Ä–∞—Ç–∏—à –∫–µ—Ä–∞–∫ –±—û–ª–∞–¥–∏
        related_name="couriers",       # Business.objects.get(...).couriers.all()
        null=True, blank=True          # –º–∞–≤–∂—É–¥ “õ–∞—Ç–æ—Ä–ª–∞—Ä —É—á—É–Ω –µ–Ω–≥–∏–ª –º–∏–≥—Ä–∞—Ü–∏—è
    )

    class Meta:
        db_table = "kuryer"   # PostgreSQL'–¥–∞ –∂–∞–¥–≤–∞–ª –Ω–æ–º–∏: public.kuryer
        verbose_name = "Kuryer"
        verbose_name_plural = "Kuryerlar"
        indexes = [
            models.Index(fields=["kuryer_id"], name="idx_kuryer_id"),
            models.Index(fields=["tel_num"], name="idx_kuryer_tel"),
            models.Index(fields=["narxlar_diap_davri"], name="idx_kuryer_diap_davr"),
            models.Index(fields=["business"], name="idx_kuryer_business"),  # üÜï —Ç–µ–∑ —Ñ–∏–ª—å—Ç—Ä/“õ–∏–¥–∏—Ä—É–≤ —É—á—É–Ω
        ]

    def __str__(self):
        return f"{self.kuryer_name} ({self.tel_num})"

    # ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è: min/max –≤–∞ –±–∏—Ä –ø–µ—Ä–∏–æ–¥ –∏—á–∏–¥–∞ —Ç—û“õ–Ω–∞—à—É–≤–Ω–∏ (overlap) —Ç–µ–∫—à–∏—Ä–∏—à
    def clean(self):
        rules = self.service_price_rules or []
        norm = []
        for r in rules:
            if not isinstance(r, dict):
                raise ValidationError("service_price_rules —ç–ª–µ–º–µ–Ω—Ç–ª–∞—Ä–∏ dict –±—û–ª–∏—à–∏ –∫–µ—Ä–∞–∫.")
            period = (r.get("period") or "month").strip()
            mn = int(r.get("min", 0))
            mx = r.get("max", None)
            if mx is not None:
                mx = int(mx)
            price = int(r.get("price", 0))
            if mn < 0:
                raise ValidationError("–î–∏–∞–ø–∞–∑–æ–Ω min –º–∞–Ω—Ñ–∏–π –±—û–ª–º–∞—Å–∏–Ω.")
            if mx is not None and mx < mn:
                raise ValidationError("–î–∏–∞–ø–∞–∑–æ–Ω max >= min –±—û–ª–∏—à–∏ –∫–µ—Ä–∞–∫.")
            if price <= 0:
                raise ValidationError("–ù–∞—Ä—Ö (price) –º—É—Å–±–∞—Ç –±—û–ª–∏—à–∏ –∫–µ—Ä–∞–∫.")
            norm.append({"period": period, "min": mn, "max": mx, "price": price})

        for p in ("month", "year"):
            segs = sorted([(r["min"], r["max"]) for r in norm if r["period"] == p], key=lambda x: x[0])
            for i in range(1, len(segs)):
                prev_min, prev_max = segs[i-1]
                cur_min,  cur_max  = segs[i]
                if prev_max is None or prev_max >= cur_min:
                    raise ValidationError(f"'{p}' –¥–∏–∞–ø–∞–∑–æ–Ω–ª–∞—Ä–∏ —û–∑–∞—Ä–æ —Ç—û“õ–Ω–∞—à–¥–∏.")

    # ‚ÑπÔ∏è –ò—Ö—Ç–∏—ë—Ä–∏–π helper: qty –≤–∞ period –±—û–π–∏—á–∞ —Ö–∏–∑–º–∞—Ç –Ω–∞—Ä—Ö–∏–Ω–∏ –∞–Ω–∏“õ–ª–∞—à
    def resolve_service_price(self, qty: int, period: str = "month") -> int:
        rules = [r for r in (self.service_price_rules or []) if (r.get("period") or "month") == period]
        rules.sort(key=lambda r: int(r.get("min", 0)))
        for r in rules:
            mn = int(r.get("min", 0))
            mx = r.get("max", None)
            mx = int(mx) if mx is not None else None
            if qty >= mn and (mx is None or qty <= mx):
                return int(r.get("price", 0))
        return 0


